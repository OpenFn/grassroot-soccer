name: grs-staging
description: null
collections: null
credentials:
  aleksa@openfn.org-grs-commcare:
    name: grs-commcare
    owner: aleksa@openfn.org
  "hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-":
    name: 'SalesForce Sandbox Integration Oauth '
    owner: hunter@openfn.org
workflows:
  "?-Upsert-Register-Skills-plus-Club":
    name: '? Upsert Register Skills plus Club'
    jobs:
      Upsert-Register-Skills-plus-Club:
        name: Upsert Register Skills plus Club
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          // push to production
          function clean(str) {
            if (!!str)
              return str
                .split('_')
                .map(word => {
                  let new_word = word.toString().toLowerCase();
                  return new_word.slice(0, 1).toUpperCase() + new_word.slice(1);
                })
                .join(' ');
          }

          fn((state) => {
            state.coaches = state.data.form.coaches.split(' ');
            state.form = state.data.form;
            return state;
          });



          upsert(
            'ampi__Project__c',
            'CommCare_External_ID__c',
            state => ({
              Name: clean(state.data.form.name_of_skillz_plus_club),
              CommCare_External_ID__c: state.data.form.case['@case_id'],
              // Venue__c: {
              //   CommCare_External_ID__c:  state.data.form.case['@case_id']
              // },

            })
          );

          each('$.coaches[*]', upsert('Event_Participation__c', 'CommCare_External_ID__c', state => ({
            Contact__r: {
              CommCare_External_ID__c: state.data
            },
            Event__r: {
              CommCare_External_ID__c: state.form.case['@case_id']
            },
            CommCare_External_ID__c: state.form.case['@case_id'] + '_' + state.data
          })))

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Register-Skills-plus-Club:
        source_trigger: webhook
        target_job: Upsert-Register-Skills-plus-Club
        condition_type: js_expression
        condition_label: Register Skillz plus Club
        condition_expression: |
          state.data.form["@name"] == "Register Skillz Plus Club" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Attendance-Non-Skillz:
    name: Attendance Non Skillz
    jobs:
      Attendance-Non-Skillz:
        name: Attendance Non Skillz
        adaptor: '@openfn/language-salesforce@4.3.0'
        credential: null
        body: |
          
          fn(state => {
            if (!state.data.form.attendance_list.update_participant_cases.item) {
              console.log('No participant attendance data was provided, not upserting to Salesforce.');
              return state;
            } else {

              return execute(
                fn(state => {
                
                  function objectToArray(object) {
                    if (!object) return [];
                    return !Array.isArray(object) ? [object] : object;
                  }

                  state.data.form.attendance_list.update_participant_cases.item = objectToArray(
                    // state.data.form.attendance_list.update_participant_cases.item  
                    [state.data.form.attendance_list.update_participant_cases.item[0]] //TODO: Remove this line and uncomment the line above for full list of items

                  );
            
                  return state;
                }),

                each(
                  merge(
                    dataPath('form.attendance_list.update_participant_cases.item[*]'),
                    fields(
                      field('intervention_name', dataValue('form.intervention_name')),
                      field('caseid', dataValue('form.case.@case_id')), //this is event id
                      field('event_session_id', state => {
                      return state.data.form.case['@case_id'] + "_" + state.data.form.attendance_list.session.replace(/\/\/\s*/g, '');
                    })
                    )
                  ),
                  upsert('Attendance__c', 'CommCare_External_ID__c', state => ({
                    ...fields(
                      relationship('Event_Session__r', 'CommCare_External_ID__c', state.data.event_session_id),
                      field(
                        'CommCare_External_ID__c',
                        state => `${state.data.event_session_id}_${state.data['@id']}`
                      ),
                      relationship('Attendee__r', 'CommCare_External_ID__c', `${state.data.caseid}_${state.data['@id']}`), //@id is the PID of participant
                      field('Attended__c', state.data.attendance_session.toString().toLowerCase() === 'yes'? "Attended": "Not Attended")
                    )
                  }))
                )
              )(state);
            }
          });

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Attendance-Non-Skillz:
        source_trigger: webhook
        target_job: Attendance-Non-Skillz
        condition_type: js_expression
        condition_label: Attendance Generic
        condition_expression: |
          state.data.form["@name"] == "Attendance" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Coach-Session-Register:
    name: Coach Session Register
    jobs:
      Coach-Session-Register:
        name: Coach Session Register
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          // push to production

          fn(state => {
            const { form } = state.data;
              state.form = form;
            const present = form.present.toLowerCase();

            function getSessionValue() {
              let value;
              switch (present) {
                case 'yes':
                  value = 'X';
                  break;
                case 'no':
                  value = 'A';
                  break;
                case '':
                  value = 'N';
                  break;
                default:
                  value = 'U';
                  break;
              }
              return value;
            }

            const session_text = form.session;

            const session_id = session_text.trim().slice(0, session_text.indexOf(' ')).slice(1);
            console.log("session_id: ", session_id);

            const coachname = form.coach_name;
            // ? form.coach_name
            // : state.references[0].records[0].Coach_A__r.Name;

            let external_id = `${form.case['@case_id']}
              ${coachname}`; //case_id + coach_name for external Id

            state.data.commcare_external_id = external_id.toLowerCase().replace(/\s/g, '').trim();

            state.data.dynamicFields = [
              {
                [`Session_${session_id}__c`]: getSessionValue(),
                [`Session_${session_id}_Date__c`]: form.date
              }
            ];

            state.data.durationFields = { [`Session_${session_id}_Duration__c`]: form.duration };
            console.log(state.data.durationFields);

            state.coachIds = form.coach_name.split(' ');


            return state;
          });



          upsert('Event_Session__c',
            'CommCare_External_ID__c',
            state => ({
              CommCare_External_ID__c: `${state.data.form.case['@case_id']}_${state.data.form.session.replace('//', '')}`,
              Session_Date__c: state.data.form.date,
              Duration_of_Session__c: state.data.form.duration,
              Event__r: {
                CommCare_External_ID__c: state.data.form.case['@case_id']
              }
            }));

          function presentMapping(value){
            switch (value){
              case 'yes':
                return 'Attended'
              case 'no':
                return 'Not Attended'
              default:
                return null
            }

          }

          each('$.coachIds[*]', upsert('Attendance__c',
            'CommCare_External_ID__c',
            state => ({
              Event_Session__r: {
                CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.form.session.replace('//', '')}`
              },
              Attendee__r: {
                CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.data}`
              },
              Attended__c: presentMapping(state.form.present),
              CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.form.session.replace('//', '')}_${state.form.case['@case_id']}_${state.data}`
            })
          ))

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Coach-Session-Register:
        source_trigger: webhook
        target_job: Coach-Session-Register
        condition_type: js_expression
        condition_label: Coach Session Register
        condition_expression: |
          state.data.form["@name"] == "Coach Session Register" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Create-Intervention:
    name: Create Intervention
    jobs:
      Create-Intervention:
        name: Create Intervention
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          

          fn((state) => {
            function clean(str) {
              if (str == "before_after_school") {
                return "Before/After School"
              }
              if (!!str)
                return str
                  .split("_")
                  .map((word) => {
                    let new_word = word.toString().toLowerCase();
                    return new_word.slice(0, 1).toUpperCase() + new_word.slice(1);
                  })
                  .join(" ");
            }

            state.data.form.delivery_method = clean(state.data.form.delivery_method);
            state.coachesIds = state.data.form.coaches.split(" ")

            state.data.destinationCoachFields = state.data.form.coaches
              .split(" ")
              .reduce((accumulator, currentValue, currentIndex) => {
                if (!!currentValue) {
                  return {
                    ...accumulator,
                    [`Event_Participation__r`]: { CommCare_External_ID__c: currentValue },
                  };
                }
                return accumulator;
              }, {});

            return state;
          });
          fn((state) => {
            const buMapping = {
              "65680f0c4c144b03ad0f86bdc46c1ebc": "GRS Zambia",
              "04d98397e28046118fade28ced6b65cb": "GRS Zimbabwe",
              ed125ab19ec34aacab79585e59eb76f4: "GRS Partnerships",
            };

            const bu = state.data.form.business_unit;

            state.mapping = {
              Name: state.data.form.name_of_intervention,
              CommCare_External_ID__c: state.data.form.case["@case_id"],
              'RecordType': {
                "Name": 'Intervention Event'
              },

              // ampi__Account__c: "001O300000egVbUIAU", // To be removed later
              // ampi__Account__r: {
              //   Buisness_Unit__r: {
              //     Name: buMapping[bu]
              //   },
              // },
              // Venue__r:  {
              //   CommCare_External_ID__c: state.data.form.Venue
              // }, //currently doensn't have an extId configured so this doesn't work
              Curriculum__r: {
                CommCare_External_ID__c: state.data.form.curriculum_selection.curriculum,
              },
              Delivery_method__c: state.data.form.delivery_method,
              Class_Group_Team__c: state.data.form.class_grade,
              // Pre_Post_Administered__c: state.data.form.prepost_administered,
              ampi__Start_Date__c: state.data.form.intervention_dates.start_date,
              ampi__End_Date__c: state.data.form.intervention_dates.end_date,
              Number_of_Coaches__c: state.data.form.num_coaches
              // ...state.data.destinationCoachFields,
            };

            console.log(state.mapping);
            state.coachContactIds = [];
            state.form = state.data.form
            return state;
          });

          upsert("ampi__Project__c", "CommCare_External_ID__c", $.mapping)


          each('$.coachesIds.[*]', query(state => `SELECT Id, CommCare_External_ID__c from Contact where CommCare_External_ID__c = '${state.data}'`).then(state => {
            if (state.data[0]?.CommCare_External_ID__c) {
              state.coachContactIds.push(state.data[0]?.CommCare_External_ID__c)
            } else {
              console.log(`WARNING: Coach with ID '${state.data}' not found in Amp Impact`);
            }
            return state
          }))

          each('$.coachContactIds.[*]', upsert("Event_Participation__c", "CommCare_External_ID__c", state => ({
            Contact__r: {
              CommCare_External_ID__c: state.data
            },
            Event__r: {
              CommCare_External_ID__c: state.form.case["@case_id"]
            },
            CommCare_External_ID__c: `${state.form.case["@case_id"]}_${state.data}`,
          })))

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Create-Intervention:
        source_trigger: webhook
        target_job: Create-Intervention
        condition_type: js_expression
        condition_label: Create Intervention
        condition_expression: |
          state.data.form["@name"] == "Create Intervention" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  HIV-Testing-Event-Statistics:
    name: HIV Testing Event Statistics
    jobs:
      HIV-Testing-Event-Statistics:
        name: HIV Testing Event Statistics
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          // push to production

          fn(state => {
            const totalAttendance = state.form.table_2_tested_profile.enter_the_number_tested_for_each_following_profile.community_members +
              state.form.table_2_tested_profile.enter_the_number_tested_for_each_following_profile.skillz_coaches +
              state.form.table_2_tested_profile.enter_the_number_tested_for_each_following_profile.staff +
              state.form.table_2_tested_profile.enter_the_number_tested_for_each_following_profile.skillz_participants;


            const totalMalesTested09 = state.form.table_1_testing_results.male_hiv_negative.question2 +
              state.form.table_1_testing_results.question33.question36;
            const totalMalesTested1014 = state.form.table_1_testing_results.male_hiv_negative.question7 +
              state.form.table_1_testing_results.question33.question41;
            const totalMalesTested1519 = state.form.table_1_testing_results.male_hiv_negative.question13 +
              state.form.table_1_testing_results.question33.question45;
            const totalMalesTested2024 = state.form.table_1_testing_results.male_hiv_negative.question18 +
              state.form.table_1_testing_results.question33.question50;
            const totalMalesTested25 = state.form.table_1_testing_results.male_hiv_negative.question28 +
              state.form.table_1_testing_results.male_hiv_negative.question32 +
              state.form.table_1_testing_results.question33.question56 +
              state.form.table_1_testing_results.question33.question60;


            const totalFemalesTested09 = state.form.table_1_testing_results.question61.question65 +
              state.form.table_1_testing_results.question89.question92;
            const totalFemalesTested1014 = state.form.table_1_testing_results.question61.question69 +
              state.form.table_1_testing_results.question89.question97;
            const totalFemalesTested1519 = state.form.table_1_testing_results.question61.question73 +
              state.form.table_1_testing_results.question89.question101;
            const totalFemalesTested2024 = state.form.table_1_testing_results.question61.question78 +
              state.form.table_1_testing_results.question89.question106;
            const totalFemalesTested25 = state.form.table_1_testing_results.question61.question84 +
              state.form.table_1_testing_results.question61.question88 +
              state.form.table_1_testing_results.question89.question112 +
              state.form.table_1_testing_results.question89.question116;

            const totalPositive25 = state.form.table_1_testing_results.question89.question112 +
              state.form.table_1_testing_results.question89.question116 +
              state.form.table_1_testing_results.question33.question56 +
              state.form.table_1_testing_results.question33.question60;

            state.mapping = [
              {
                Name: state.form.event_name,
                RecordType: { Name: "Aggregated Data - Testing Event" },
                Event_Focus__c: 'HIV',
                Testing_Event_Type__c: 'HIV Testing Event (General Event)',
                CommCare_External_ID__c: state.form.case['@case_id'],
                Number_in_Attendance__c: totalAttendance,
                Number_of_Participants_tested__c: state.form.table_2_tested_profile.enter_the_number_tested_for_each_following_profile.skillz_participants,
                Number_of_Males_Tested__c: totalMalesTested09,
                Number_of_Females_Tested__c: totalFemalesTested09,
                Number_Testing_Positive__c: state.form.table_1_testing_results.question33.question36 + state.form.table_1_testing_results.question89.question92,
                Age_Range__c: "0-9",
                Number_of_Individuals_Tested__c: totalFemalesTested09 + totalMalesTested09,
              },
              {
                Name: state.form.event_name,
                RecordType: { Name: "Aggregated Data - Testing Event" },
                Event_Focus__c: 'HIV',
                Testing_Event_Type__c: 'HIV Testing Event (General Event)',
                CommCare_External_ID__c: state.form.case['@case_id'],
                Number_in_Attendance__c: totalAttendance,
                Number_of_Participants_tested__c: state.form.table_2_tested_profile.enter_the_number_tested_for_each_following_profile.skillz_participants,
                Number_of_Males_Tested__c: totalMalesTested1014,
                Number_of_Females_Tested__c: totalFemalesTested1014,
                Number_Testing_Positive__c: state.form.table_1_testing_results.question33.question41 + state.form.table_1_testing_results.question89.question97,
                Age_Range__c: "10-14",
                Number_of_Individuals_Tested__c: totalFemalesTested1014 + totalMalesTested1014,
              },
              {
                Name: state.form.event_name,
                RecordType: { Name: "Aggregated Data - Testing Event" },
                Event_Focus__c: 'HIV',
                Testing_Event_Type__c: 'HIV Testing Event (General Event)',
                CommCare_External_ID__c: state.form.case['@case_id'],
                Number_in_Attendance__c: totalAttendance,
                Number_of_Participants_tested__c: state.form.table_2_tested_profile.enter_the_number_tested_for_each_following_profile.skillz_participants,
                Number_of_Males_Tested__c: totalMalesTested1519,
                Number_of_Females_Tested__c: totalFemalesTested1519,
                Number_Testing_Positive__c: state.form.table_1_testing_results.question33.question45 + state.form.table_1_testing_results.question89.question101,
                Age_Range__c: "15-19",
                Number_of_Individuals_Tested__c: totalFemalesTested1519 + totalMalesTested1519,
              },
              {
                Name: state.form.event_name,
                RecordType: { Name: "Aggregated Data - Testing Event" },
                Event_Focus__c: 'HIV',
                Testing_Event_Type__c: 'HIV Testing Event (General Event)',
                CommCare_External_ID__c: state.form.case['@case_id'],
                Number_in_Attendance__c: totalAttendance,
                Number_of_Participants_tested__c: state.form.table_2_tested_profile.enter_the_number_tested_for_each_following_profile.skillz_participants,
                Number_of_Males_Tested__c: totalMalesTested2024,
                Number_of_Females_Tested__c: totalFemalesTested2024,
                Number_Testing_Positive__c: state.form.table_1_testing_results.question33.question50 + state.form.table_1_testing_results.question89.question106,
                Age_Range__c: "20-24",
                Number_of_Individuals_Tested__c: totalFemalesTested2024 + totalMalesTested2024,
              },
              {
                Name: state.form.event_name,
                RecordType: { Name: "Aggregated Data - Testing Event" },
                Event_Focus__c: 'HIV',
                Testing_Event_Type__c: 'HIV Testing Event (General Event)',
                CommCare_External_ID__c: state.form.case['@case_id'],
                Number_in_Attendance__c: totalAttendance,
                Number_of_Participants_tested__c: state.form.table_2_tested_profile.enter_the_number_tested_for_each_following_profile.skillz_participants,
                Number_of_Males_Tested__c: totalMalesTested25,
                Number_of_Females_Tested__c: totalFemalesTested25,
                Number_Testing_Positive__c: totalPositive25,
                Age_Range__c: "25+",
                Number_of_Individuals_Tested__c: totalFemalesTested25 + totalMalesTested25,
              }
            ]
            return state
          })

          each('$.mapping[*]', upsert('ampi__Project__c',
            'CommCare_External_ID__c',
            state => state.data))

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->HIV-Testing-Event-Statistics:
        source_trigger: webhook
        target_job: HIV-Testing-Event-Statistics
        condition_type: js_expression
        condition_label: HIV Testing Event Statistics
        condition_expression: |
          state.data.form["@name"] == "HIV Testing Event Statistics" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Load-Commcare-Data:
    name: Load Commcare Data
    jobs:
      Get-data:
        name: Get data
        adaptor: '@openfn/language-commcare@3.2.13'
        credential: aleksa@openfn.org-grs-commcare
        body: |
          // Check out the Job Writing Guide for help getting started:
          // https://docs.openfn.org/documentation/jobs/job-writing-guide
          //get('https://docs.openfn.org/documentation');

          get("/form/b5f58b44-d135-4c83-9287-cd3c47bae075")

    triggers:
      cron:
        type: cron
        cron_expression: '*/15 * * * *'
        enabled: true
    edges:
      cron->Get-data:
        source_trigger: cron
        target_job: Get-data
        condition_type: always
        enabled: true
  Upsert-Attendance-Skillz-Plus-Club:
    name: Upsert Attendance Skillz Plus Club
    jobs:
      Upsert-Attendance-Skillz-Plus-Club:
        name: Upsert Attendance Skillz Plus Club
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          fn(state => {
            state.form = state.data.form;
            return state;
          });


          query(
            `SELECT CommCare_External_ID__c FROM Event_Session__c
               WHERE Event__r.CommCare_External_ID__c = '${state.data.form.case['@case_id']}' AND Session_Date__c = NULL ORDER BY CreatedDate ASC Limit 1`);

          fnIf(!$.data[0]?.CommCare_External_ID__c, query(
            `SELECT CommCare_External_ID__c FROM Event_Session__c
               WHERE Event__r.CommCare_External_ID__c = '${state.data.form.case['@case_id']}' AND Session_Date__c = ${state.data.form.attendance_list.update_participant_cases.item[0].date} ORDER BY CreatedDate ASC Limit 1`));


          fn(state => {
            state.sessionId = state.data[0]?.CommCare_External_ID__c
            return state;
          })

          upsert('Event_Session__c', 'CommCare_External_ID__c', state => (
            {
              Session_Date__c: state.form.attendance_list.update_participant_cases.item[0].date,
              Event__r: {
                CommCare_External_ID__c: state.form.case['@case_id']
              },
              CommCare_External_ID__c: state.sessionId
            }
          ))

          each('$.form.attendance_list.update_participant_cases.item[*]',
            upsert('Event_Participation__c', 'CommCare_External_ID__c', state => ({
              Contact__r: {
                CommCare_External_ID__c: state.data['@id']
              },
              Event__r: {
                CommCare_External_ID__c: state.form.case['@case_id']
              },
              CommCare_External_ID__c: state.form.case['@case_id'] + '_' + state.data['@id']

            }))
          );

          each('$.form.attendance_list.update_participant_cases.item[*]',
            upsert('Attendance__c', 'CommCare_External_ID__c', state => ({
              Attended__c: state.data.attendance_session,
              Event_Session__r: {
                CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.sessionId}`
              },
              Attendee__r: {
                CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.data['@id']}`
              },
              CommCare_External_ID__c: state.sessionId + '_' + state.form.case['@case_id']

            }))
          );

          // fn(state => {
          //   const PID = lastReferenceValue('records[0].Participant_Identification_Number_PID__c')(state);

          //   if (!PID) {
          //     console.log(
          //       `Participant not found with Participant_Identification_Number_PID__c: ${state.data.form.attendance_list.update_participant_cases.item[0]['@id']}`
          //     );
          //     return state;
          //   }
          //   return execute(
          //     // Set state.references to event record
          //     query(
          //       `SELECT Id, Name, CommCare_Ext_ID__c FROM Event__c WHERE CommCare_Case_ID__c = '${state.data.form.case['@case_id']}'`
          //     ),
          //     // Organise data and keep it safe
          //     fn(state => {
          //       function objectToArray(object) {
          //         if (!object) return [];
          //         return !Array.isArray(object) ? [object] : object;
          //       }

          //       const eventName = lastReferenceValue('records[0].CommCare_Ext_ID__c')(state);
          //       state.data.eventName = eventName;

          //       state.data.form.attendance_list.update_participant_cases.item = objectToArray(
          //         state.data.form.attendance_list.update_participant_cases.item
          //       );

          //       state.data.form.attendance_list.update_participant_cases.item =
          //         state.data.form.attendance_list.update_participant_cases.item.map(item => ({
          //           ...item,
          //           CommCare_Ext_ID__c: `${item['@id']}-${eventName}`,
          //           event_case_id: state.data.form.case['@case_id'],
          //         }));

          //       //  Keep our data safe
          //       state.items = state.data.form.attendance_list.update_participant_cases.item;

          //       // Reset references
          //       state.references = [];

          //       return state;
          //     }),
          //     // Set state.references to an array of attendance records for each participant
          //     beta.each(
          //       '$.items[*]',
          //       query(
          //         state => `SELECT CommCare_Ext_ID__c, Session_1__c, Session_2__c, Session_3__c, Session_4__c, Session_5__c, Session_6__c, Session_7__c, Session_8__c, Session_9__c, Session_10__c, Session_11__c, Session_12__c, Session_13__c, Session_14__c, Session_15__c, Session_16__c, Session_17__c, Session_18__c, Session_19__c, Session_20__c, Session_21__c, Session_22__c, Session_23__c,Session_24__c, Session_25__c, Session_26__c, Session_27__c, Session_28__c
          //          FROM Attendance__c
          //          WHERE CommCare_Ext_ID__c = '${state.data.CommCare_Ext_ID__c}'
          //          `
          //       )
          //     ),
          //     // Calculate dynamic fields
          //     fn(state => {
          //       state.items = state.items.map(item => {
          //         const record = state.references.find(rec =>
          //           rec.records[0] ? rec.records[0].CommCare_Ext_ID__c === item.CommCare_Ext_ID__c : true
          //         ).records[0];

          //         function getSessionValue(present) {
          //           if (!present) return 'U';
          //           switch (present.toString().toLowerCase()) {
          //             case 'yes':
          //               return 'X';
          //             case 'no':
          //               return 'A';
          //             case '':
          //               return 'N';
          //             default:
          //               return 'U';
          //           }
          //         }

          //         function getSessionFieldName(record) {
          //           if (!record || Object.keys(record).length === 0) {
          //             return 'Session_1__c';
          //           }

          //           const fieldName = Object.entries(record)
          //             .filter(rec => rec[1] === null && rec[0] !== 'CommCare_Ext_ID__c')
          //             .sort(function (a, b) {
          //               return a[0].split('_')[1] - b[0].split('_')[1];
          //             })[0][0];

          //           return fieldName;
          //         }

          //         const sessionValue = getSessionValue(item.attendance_session);
          //         const sessionDate = item.date;
          //         const sessionFieldName = getSessionFieldName(record);
          //         const sessionDateFieldName = `Session_${sessionFieldName.split('_')[1]}_Date__c`;

          //         return {
          //           ...item,
          //           dynamicFields: {
          //             [sessionFieldName]: sessionValue,
          //             [sessionDateFieldName]: sessionDate,
          //           },
          //         };
          //       });

          //       //  Reset state.references
          //       state.references = [];

          //       return state;
          //     }),

          //     // Upsert
          //     beta.each(
          //       '$.items[*]',
          //       upsert('Attendance__c', 'CommCare_Ext_ID__c', state => ({
          //         ...fields(
          //           field('CommCare_Ext_ID__c', dataValue('CommCare_Ext_ID__c')),
          //           relationship('Person_Attendance__r', 'Participant_Identification_Number_PID__c', dataValue('@id')),
          //           relationship('Event__r', 'CommCare_Case_ID__c', dataValue('event_case_id'))
          //         ),
          //         ...state.data.dynamicFields,
          //       }))
          //     )
          //   )(state);
          // });

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Attendance-Skillz-Plus-Club:
        source_trigger: webhook
        target_job: Upsert-Attendance-Skillz-Plus-Club
        condition_type: js_expression
        condition_label: Attendance Skillz Plus Club
        condition_expression: |
          state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816" && state.data.form["skillz_attendance"] == "1"

        enabled: true
  Upsert-Coach-Support-Visit-CSV:
    name: Upsert Coach Support Visit CSV
    jobs:
      Upsert-Coach-Support-Visit-CSV:
        name: Upsert Coach Support Visit CSV
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          //openfn.org source
          function transform(value) {
            if (!value) return;
            switch (value.toString().trim()) {
              case 'copy-1-of-excellent':
                return 'Excellent';
              case 'needs_improvement':
                return 'Needs Improvement';
              case 'meets_expectations':
                return 'Meets Expectations';
              case 'excellent':
                return 'Excellent';
              case 'unsatisfactory':
                return 'Unsatisfactory';
              case 'exceeds_expectations':
                return 'Exceeds Expectations';
              default:
                return value;
            }
          };

          function clean(str) {
            if (!str) return '';

            return str
              .split('_')
              .map(word => {
                let new_word = word.toString().toLowerCase();
                return new_word.slice(0, 1).toUpperCase() + new_word.slice(1);
              })
              .join(' ');
          };

          fn(state => {


            if (state.data.form['step_3_-_the_big_5'] !== undefined) {
              state.data.form['step_3_-_the_big_5'].faciliation = clean(state.data.form['step_3_-_the_big_5'].faciliation);
            }
            else {
              state.data.form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.faciliation =
                clean(state.data.form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.faciliation);
            }



            state.data.form['step_3_-_the_big_5'].builds_personal_connections =
              transform(state.data.form['step_3_-_the_big_5'].builds_personal_connections)

            state.data.form['step_3_-_the_big_5'].cool_down =
              transform(state.data.form['step_3_-_the_big_5'].cool_down)

            state.data.form['step_3_-_the_big_5'].creates_safe_space =
              transform(state.data.form['step_3_-_the_big_5'].creates_safe_space)

            state.data.form['step_3_-_the_big_5'].faciliation =
              transform(state.data.form['step_3_-_the_big_5'].faciliation)

            state.data.form['step_3_-_the_big_5'].gives_praise =
              transform(state.data.form['step_3_-_the_big_5'].gives_praise)

            state.data.form['step_3_-_the_big_5'].praise =
              transform(state.data.form['step_3_-_the_big_5'].praise)

            state.data.form['step_3_-_the_big_5'].preparation =
              transform(state.data.form['step_3_-_the_big_5'].preparation)

            state.data.form['step_3_-_the_big_5'].shares_accurate_information_about_hivaids_sexual_reproductive_health_and_ri =
              transform(state.data.form['step_3_-_the_big_5'].shares_accurate_information_about_hivaids_sexual_reproductive_health_and_ri)

            state.data.form['step_3_-_the_big_5'].sparks_vital_conversations =
              transform(state.data.form['step_3_-_the_big_5'].sparks_vital_conversations)

            state.data.form['step_3_-_the_big_5'].time_management =
              transform(state.data.form['step_3_-_the_big_5'].time_management)

            state.data.form['step_3_-_the_big_5'].warm_up =
              transform(state.data.form['step_3_-_the_big_5'].warm_up)
            state.form = state.data.form;
            state.commcareId = state.data.id
            return state;
          });

          query(
            state => `SELECT Commcare_External_ID__c FROM ampi__Project__c WHERE Name = '${state.form.hidden_properties.intervention || state.form.step_1_csv_information.intervention}'`
          )

          upsert('Visit__c', 'Commcare_External_ID__c',
            state => ({
              Coach__r: {
                Commcare_External_ID__c: state.data[0]['CommCare_External_ID__c'] +'_'+state.form.step_1_basic_information?.select_coach || state.form.step_1_csv_information.select_coach
              },
              Intervention__r: {
                Commcare_External_ID__c: state.data[0]['CommCare_External_ID__c']
              },
              CSV_Date__c: state.form.step_2_practice_information.date_of_csv,

              RecordType: {
                Name:'Coach Support Visit'
              },
              Commcare_External_ID__c: state.commcareId,
            })
          )

          // upsert(
          //   'Coach_Support_Visit__c',
          //   'CommCare_Ext_ID__c',
          //   fields(
          //     field('CommCare_Ext_ID__c', dataValue('id')),
          //     relationship('Coach_Person__r', 'CommCare_Ext_ID__c', state => {
          //       return dataValue('form.step_1_basic_information.select_coach')(state) ||
          //         dataValue('form.step_1_csv_information.select_coach')(state);
          //     }),
          //     relationship('Venue__r', 'CommCare_Ext_ID__c', state => {
          //       return dataValue('form.hidden_properties.venue')(state) ||
          //         dataValue('form.step_1_csv_information.venue')(state);
          //     }),
          //     relationship('Event__r', 'CommCare_Ext_ID__c', state => {
          //       return dataValue('form.hidden_properties.intervention')(state) ||
          //         dataValue('form.step_1_csv_information.intervention')(state);
          //     }),
          //     relationship('Curriculum_Aggregate__r', 'CommCare_Ext_ID__c', state => {
          //       return dataValue('form.hidden_properties.curriculum')(state) ||
          //         dataValue('form.step_1_csv_information.curriculum')(state);
          //     }),
          //     relationship('Site_Lookup__r', 'CommCare_Ext_ID__c', state => {
          //       return dataValue('form.hidden_properties.site')(state) ||
          //         dataValue('form.step_1_csv_information.site')(state);
          //     }),
          //     field('Date__c', dataValue('form.step_2_practice_information.date_of_csv')),
          //     //== TODO: FIx repeated mappings to only reference destination field 1 time ===//
          //     field(
          //       'Accurate_Information__c', state => {
          //         return dataValue('form.step_3_-_the_big_5.shares_accurate_information_about_hivaids_sexual_reproductive_health_and_ri')(state) ||
          //           dataValue(
          //             'form.step_3_the_big_five.question1.shares_accurate_information_about_hivaids_sexual_reproductive_health_and_ri'
          //           )(state);
          //       }),
          //     field('Creates_safe_space__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.creates_safe_space')(state) ||
          //         dataValue('form.step_3_the_big_five.question1.creates_safe_space')(state);

          //     }),
          //     field('Builds_personal_connections__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.builds_personal_connections')(state) ||
          //         dataValue('form.step_3_the_big_five.question1.builds_personal_connections')(state);
          //     }),
          //     field('Gives_praise__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.gives_praise')(state) ||
          //         dataValue('form.step_3_the_big_five.question1.gives_powerful_praise')(state);
          //     }),
          //     field('Sparks_vital_conversations__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.sparks_vital_conversations')(state) ||
          //         dataValue('form.step_3_the_big_five.question1.sparks_vital_conversations')(state);
          //     }),
          //     field('X2_Warm_Up__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.warm_up')(state) ||
          //         dataValue(
          //           'form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.warm_up'
          //         )(state);
          //     }),
          //     field('X3_Activity__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.activity')(state) || dataValue(
          //         'form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.activity'
          //       )(state);
          //     }),
          //     field('X4_Cool_Down__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.cool_down')(state) || dataValue(
          //         'form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.cool_down'
          //       )(state);
          //     }),
          //     field('X5_Facilitation__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.faciliation')(state) ||
          //         dataValue(
          //           'form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.faciliation'
          //         )(state);
          //     }),
          //     field(
          //       'X6_Time_Management__c',
          //       dataValue('form.step_3_-_the_big_5.time_management')
          //     ),
          //     field(
          //       'X1_Preparation__c',
          //       dataValue('form.step_3_-_the_big_5.preparation')
          //     ),
          //     field('Introduces_micromove__c', state => {
          //       return //dataValue('form.step_3_-_the_big_5.faciliation')(state) || 
          //       dataValue(
          //         'form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.micromove'
          //       )(state);
          //     }),
          //     field(
          //       'Notes__c',
          //       dataValue(
          //         'form.step_3_-_the_big_5.additional_notes.include_your_obsevations_related_to_preparation_punctuality_process'
          //       )
          //     )
          //   )
          // );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Coach-Support-Visit-CSV:
        source_trigger: webhook
        target_job: Upsert-Coach-Support-Visit-CSV
        condition_type: js_expression
        condition_label: Coach Support Visit Form
        condition_expression: |
          state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816" && state.data.form["hidden_properties"].csv == "1"

        enabled: true
  Upsert-Home-Visit-Log-Form:
    name: Upsert Home Visit Log Form
    jobs:
      Upsert-Home-Visit-Log-Form:
        name: Upsert Home Visit Log Form
        adaptor: '@openfn/language-salesforce@2.7.4'
        credential: null
        body: |
          // push to production

          query(
            `SELECT Participant_Identification_Number_PID__c from Contact where Participant_Identification_Number_PID__c  = '${state.data.form.case['@case_id']}'`
          );
          query(
                  `SELECT Id, Event_Session__c, CreatedDate, Attendee__c, Attendee__r.Contact__r.Participant_Identification_Number_PID__c, Attendee__r.Event__c
                  FROM Attendance__c
                  WHERE Attendee__r.Contact__r.Participant_Identification_Number_PID__c = '${state.data.form.case['@case_id']}'
                  ORDER BY CreatedDate DESC LIMIT 1`
                ).then(state => {
                  const { records } = state.references[0];
                  const eventId = records[0].Attendee__r.Event__c;
                  state.data.eventField = [field('Event__c', eventId)];
                  state.data.eventId = eventId
                  return state;
                });
          fn(state => {
            // const PID = lastReferenceValue('records[1].Participant_Identification_Number_PID__c')(state);
            // if (!PID) {
            //   console.log(
            //     `Participant not found with Participant_Identification_Number_PID__c: ${state.data.form.case['@case_id']}`
            //   );
            //   return state;
            // } // @hunter this should throw an error, not just return state
             state.mapping = {
                CommCare_External_ID__c: state.data.id,

                Parent_mobile_number__c: state.data.form.basic_information.Mobile_number,
                Visit_Date__c: state.data.form.participant_infomation.visit_information.visit_date,
                // Pre_Post_Administered__c: state.data.form.prepost_administered,
                Description__c: state.data.form.administrative.visit_notes,
                Parent_consent__c: state.data.form.basic_information.consent_received === 'yes'?true:false,
             
                Reason_for_Home_Visit__c: state.data.form.participant_infomation.reason_for_home_visit,
                // Event_Participation__r: { 
                //   CommCare_External_ID__c: state.data.eventId + "-" + state.data.form.case['@case_id']
                // },
                // Coach__r: {
                //   CommCare_External_ID__c: state.data.eventId + "-" + state.data.form.basic_information.coach_id
                // },
                Intervention__c: state.eventId,
                RecordType: {
                  Name: "Home Visit"
                } 
               
              }

              console.log(state.mapping)

          return state

          });

          upsert('Visit__c', 'CommCare_External_ID__c', {...$.mapping}) //@hunter this will execute even if participant is not found

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Home-Visit-Log-Form:
        source_trigger: webhook
        target_job: Upsert-Home-Visit-Log-Form
        condition_type: js_expression
        condition_label: Home Visit Log Form
        condition_expression: |
          state.data.form["@name"] == "Home Visit Log Form" && state.data.form["basic_information"]["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Intervention-Notes:
    name: Upsert Intervention Notes
    jobs:
      Upsert-Intervention-Notes:
        name: Upsert Intervention Notes
        adaptor: '@openfn/language-salesforce@2.7.4'
        credential: null
        body: |
          //openfn.org source 
          upsert(
            'ampi__Project__c',
            'CommCare_External_ID__c',
            fields(
              field('CommCare_External_ID__c', dataValue('form.case.@case_id')),
              //field('Name', dataValue('form.intervention_name')),
              field('Notes__c', dataValue('form.intervention_notes_to_save')),
              relationship('RecordType', 'Name', 'Intervention Event')
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Intervention-Notes:
        source_trigger: webhook
        target_job: Upsert-Intervention-Notes
        condition_type: js_expression
        condition_label: Intervention Notes
        condition_expression: |
          state.data.form["@name"] == "Intervention Notes" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Post-Challenges:
    name: Upsert Post Challenges
    jobs:
      Upsert-Post-Challenges:
        name: Upsert Post Challenges
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          fn(state => {
            state.form = state.data.form;
            const formVersion = Object.keys(state.form).find(key => key.includes('challenge'));

            state.skippingUpsert = formVersion === 'post_challenge_ecap_-_post_-_season_survey_for_athletes'


            if (formVersion === 'post_challenge_ecap_-_post_-_season_survey_for_athletes') {
              console.log('Skipping upsert for ECAP data');
            }

            return state;
          })
          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            return query(`
            SELECT Id, Name, CommCare_External_ID__c
            FROM ampi__Project__c 
            WHERE Name = '${state.form.hidden_properties.intervention_name}'`)(state);
          })

          fn(state => {
            state.eventId = state.data[0]?.CommCare_External_ID__c;
            if (!state.eventId) {
              console.log(
                `Event not found for Intervention Name: 
                ${state.form.hidden_properties.intervention_name}`
              );
            }
            state.skippingUpsert = state.skippingUpsert || !state.eventId;
            if (state.skippingUpsert) {
              return state;
            }
            return query(
              `SELECT CommCare_External_ID__c from Contact 
              where Participant_Identification_Number_PID__c  = '${state.form.case['@case_id']}'`
            )(state);
          })

          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            const PID = state.data[0] && state.data[0].CommCare_External_ID__c;
            state.skippingUpsert = state.skippingUpsert || !Boolean(PID)

            if (!PID) {
              console.log(
                `Participant not found with Participant_Identification_Number_PID__c: 
                ${state.form.case['@case_id']}`
              );
              return state;
            }

            return query(`
            SELECT Id, Name, RecordTypeId, ampi__Description__c, Type__c, Active__c, Curriculum__r.Name
            FROM ampi__Submission__c 
            WHERE Active__c = true 
            AND Type__c = 'Pre/Post Template' 
            AND Curriculum__r.Commcare_External_ID__c = '${state.form.hidden_properties.Curriculum}'
          `)(state);
          })
          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            const submissionTemplate = state.data? state.data[0] : undefined
            state.skippingUpsert = state.skippingUpsert || !Boolean(submissionTemplate)

            if (!submissionTemplate){
              console.log(
                `Submission Template not found for Pre/Post template with Curriculum Id: 
                ${state.form.hidden_properties.Curriculum}`
              );
              return state;
            }
            return upsert(
              'ampi__Submission__c', 
              'CommCare_External_ID__c', state => 
              ({
              Type__c: state.form ? state.form['@name'].split(" ")[0] : null,
              ampi__Parent_Submission__c: state.data[0]?.Id,
              Curriculum__r: { CommCare_External_ID__c: state.form.hidden_properties.Curriculum },
              Event_Participation__r: {
                CommCare_External_ID__c: `${state.eventId}_${state.form.case['@case_id']}`
              },
              GRS_Event__r: { CommCare_External_ID__c: state.eventId },
              RecordType: { Name: "Submission" },
              CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.eventId}_post_submission`
            })
           )(state)});
          fnIf((state) => !state.skippingUpsert, query(state => `
            SELECT Id, Name, Record_Type_Name__c, ampi__Description__c, ampi__Response_Type__c, CommCare_Property_Name__c
            FROM ampi__Question__c 
            WHERE ampi__Submission__c = '${state.data.id}'
          `))

          // the query returns a list of questions for the specific parent submission
          // Currently hardcoding the parent submission id i created in previous runs
          // next we will look for form keys that start with form.pre_challenge_[*]
          // under form.pre_challenge_[*] we will find a list of commcare questions with their CommCare_External_ID__c
          // which we will match with ampi__Question__c CommCareExternal_ID__c and update the ampi__Picklist_Response__c field 

          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            // First, find the form element that starts with pre_challenge pattern
            const formKeys = Object.keys(state.form).filter(key =>
              key.startsWith('post_challenge_')
            );

            if (formKeys.length === 0) {
              console.log('No post_challenge keys found in form data');
              return state;
            }

            // Extract the question-answer pairs from the first matching key
            const questionAnswers = state.form[formKeys[0]];

            // Function to transform CommCare responses to Salesforce format
            function transformResponse(response) {
              if (!response) return null;
              const normalizedResponse = response.toString().trim().toLowerCase();

              if (['true', 'yes', 'agree', 'verdade', 'concorda', 'concordo', 'choice1'].includes(normalizedResponse)) {
                return "Yes";
              } else if (['false', 'no', 'disagree', 'discorda', 'discordo', 'falso', 'choice6', 'choice3'].includes(normalizedResponse)) {
                return "No";
              } else if (['i_dont_know', 'na'].includes(normalizedResponse)) {
                return "I don't know";
                // } else if (normalizedResponse === 'unanswered') {
                //   return "Unanswered";
                // } else if (normalizedResponse === 'not_applicable') {
                //   return "Not Applicable";
              } else {
                return "I don't know";
              }
            }

            // For each question in our data array, find matching answer and update
            const updates = state.data.map(question => {
              // Extract the question ID part to match with CommCare keys
              const questionName = question.CommCare_Property_Name__c


              // Look for matching keys in questionAnswers
              // Try direct match or substring match
              let matchingKey = null;
              let answer = null;

              // Try direct match
              if (questionName && questionAnswers[questionName]) {
                matchingKey = questionName;
                answer = questionAnswers[questionName];
              }

              if (matchingKey) {
                return {
                  Id: question.Id,
                  ampi__Picklist_Response__c: transformResponse(answer),
                  ampi__Date_Response__c: state.form.hidden_properties.date
                };
              }

              // No match found
              console.log(`No match found for question: ${question.ampi__Description__c}`);
              return null;
            }).filter(update => update !== null);

            console.log(`Found ${updates.length} questions to update`);

            // If we have updates, perform them
            if (updates.length > 0) {
              return update(
                'ampi__Question__c',
                updates
              )(state);
            }

            return state;
          });


          //Removing mapping... need case_id to upsert Events. Date_of_Post__c update should be handled on the SF side.
          /*upsert(
              'Event__c',
              'CommCare_Ext_ID__c',
              fields(
                field('CommCare_Ext_ID__c', dataValue('form.hidden_properties.intervention_name')),
                field('Date_of_Post__c', dataValue('form.date')),
              )
            );*/

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Post-Challenges:
        source_trigger: webhook
        target_job: Upsert-Post-Challenges
        condition_type: js_expression
        condition_label: Post Challenges
        condition_expression: |
          state.data.form["@name"] == "Post Challenges" && state.data.form["hidden_properties"]["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Pre-Challenges:
    name: Upsert Pre Challenges
    jobs:
      Upsert-Pre-Challenges:
        name: Upsert Pre Challenges
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          fn(state => {
            state.form = state.data.form;
            return state;
          })
          query(state => `
            SELECT Id, Name, CommCare_External_ID__c
            FROM ampi__Project__c 
            WHERE Name = '${state.form.hidden_properties.intervention_name}'`);

          fn(state => {
            state.eventId = state.data[0]?.CommCare_External_ID__c;
            if (!state.eventId) {
              console.log(
                `Event not found for Intervention Name: 
                ${state.form.hidden_properties.intervention_name}`
              );
            }
            state.skippingUpsert = !state.eventId;
            if (state.skippingUpsert) {
              return state;
            }
             return query(
              `SELECT CommCare_External_ID__c from Contact 
              where Participant_Identification_Number_PID__c  = '${state.form.case['@case_id']}'`
            )(state);
          })

          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            const PID = state.data[0] && state.data[0].CommCare_External_ID__c;

            if (!PID) {
              console.log(
                `Participant not found with Participant_Identification_Number_PID__c: 
                ${state.form.case['@case_id']}`
              );
              return state;
            }

            state.skippingUpsert = state.skippingUpsert || !Boolean(PID)
            return query(`
            SELECT Id, Name, RecordTypeId, ampi__Description__c, Type__c, Active__c, Curriculum__r.Name
            FROM ampi__Submission__c 
            WHERE Active__c = true 
            AND Type__c = 'Pre/Post Template' 
            AND Curriculum__r.Commcare_External_ID__c = '${state.form.hidden_properties.Curriculum}'
          `)(state);
          })
          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            const submissionTemplate = state.data? state.data[0] : undefined
            state.skippingUpsert = state.skippingUpsert || !Boolean(submissionTemplate)

            if (!submissionTemplate){
              console.log(
                `Submission Template not found for Pre/Post template with Curriculum Id: 
                ${state.form.hidden_properties.Curriculum}`
              );
              return state;
            }


            return upsert(
              'ampi__Submission__c', 
              'CommCare_External_ID__c', state => 
              ({
                Type__c: state.form ? state.form['@name'].split(" ")[0] : null,
                ampi__Parent_Submission__c: state.data[0].Id,
                Curriculum__r: { CommCare_External_ID__c: state.form.hidden_properties.Curriculum },
                Event_Participation__r: { 
                  CommCare_External_ID__c: `${state.form.hidden_properties.intervention_name}_${state.form.case['@case_id']}` 
                },
                GRS_Event__r: { Name: state.form.hidden_properties.intervention_name },
                RecordType: {Name: "Submission"},
                CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.form.hidden_properties.intervention_name}_pre_submission`
              })
            )(state)});
          fnIf((state) => !state.skippingUpsert, query(state => `
            SELECT Id, Name, Record_Type_Name__c, ampi__Description__c, ampi__Response_Type__c, CommCare_Property_Name__c
            FROM ampi__Question__c 
            WHERE ampi__Submission__c = '${state.data.id}'
          `));

          // the query returns a list of questions for the specific parent submission
          // Currently hardcoding the parent submission id i created in previous runs
          // next we will look for form keys that start with form.pre_challenge_[*]
          // under form.pre_challenge_[*] we will find a list of commcare questions with their CommCare_External_ID__c
          // which we will match with ampi__Question__c CommCareExternal_ID__c and update the ampi__Picklist_Response__c field 

          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            // First, find the form element that starts with pre_challenge pattern
            const formKeys = Object.keys(state.form).filter(key => 
              key.startsWith('pre_challenge_')
            );
            
            if (formKeys.length === 0) {
              console.log('No pre_challenge keys found in form data');
              return state;
            }
            
            // Extract the question-answer pairs from the first matching key
            const questionAnswers = state.form[formKeys[0]];
            
            // Function to transform CommCare responses to Salesforce format
            function transformResponse(response) {
              if (!response) return null;
              const normalizedResponse = response.toString().trim().toLowerCase();
              
              if (['true', 'yes', 'agree', 'verdade', 'concorda', 'concordo', 'choice1'].includes(normalizedResponse)) {
                return "Yes";
              } else if (['false', 'no', 'disagree', 'discorda', 'discordo', 'falso', 'choice6', 'choice3'].includes(normalizedResponse)) {
                return "No";
              } else if (['i_dont_know', 'na'].includes(normalizedResponse)) {
                return "I don't know";
              // } else if (normalizedResponse === 'unanswered') {
              //   return "Unanswered";
              // } else if (normalizedResponse === 'not_applicable') {
              //   return "Not Applicable";
              } else {
                return "I don't know";
              }
            }
            
            // For each question in our data array, find matching answer and update
            const updates = state.data.map(question => {
              // Extract the question ID part to match with CommCare keys
              const questionName = question.CommCare_External_ID__c
                
              
              // Look for matching keys in questionAnswers
              // Try direct match or substring match
              let matchingKey = null;
              let answer = null;
              
              // Try direct match
              if (questionName && questionAnswers[questionName]) {
                matchingKey = questionName;
                answer = questionAnswers[questionName];
              }
              
              if (matchingKey) {
                return {
                  Id: question.Id,
                  ampi__Picklist_Response__c: transformResponse(answer),
                  ampi__Date_Response__c: state.form.date
                };
              }
              
              // No match found
              console.log(`No match found for question: ${question.ampi__Description__c}`);
              return null;
            }).filter(update => update !== null);
            
            console.log(`Found ${updates.length} questions to update`);
            
            // If we have updates, perform them
            if (updates.length > 0) {
              return update(
                'ampi__Question__c',
                updates
              )(state);
            }
            
            return state;
          });

          // //Removing mapping... need case_id to upsert Events. Date_of_Pre__c update should be handled on the SF side.
          // // upsert(
          // //   'Event__c',
          // //   'CommCare_Ext_ID__c',
          // //   fields(
          // //     field('CommCare_Ext_ID__c', dataValue('form.hidden_properties.intervention_name')),
          // //     field('Date_of_Pre__c', dataValue('form.date')),

          // //   )
          // // );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Pre-Challenges:
        source_trigger: webhook
        target_job: Upsert-Pre-Challenges
        condition_type: js_expression
        condition_label: Pre Challenges
        condition_expression: |
          state.data.form["@name"] == "Pre Challenges" && state.data.form["hidden_properties"]["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Register-Event:
    name: Upsert Register Event
    jobs:
      Upsert-Register-Event:
        name: Upsert Register Event
        adaptor: '@openfn/language-salesforce@2.7.4'
        credential: null
        body: |
          alterState((state) => {
            
            function clean(str) {
              if (!!str)
                return str
                  .split('_')
                  .map(word => {
                    let new_word = word.toString().toLowerCase();
                    return new_word.slice(0, 1).toUpperCase() + new_word.slice(1);
                  })
                  .join(' ');
            }
            
            const coachFieldNames = ['Coach_A__r','Coach_B__r','Coach_C__r','Coach_D__r']
           
            state.data.destinationCoachFields = state.data.form.event_information.coaches
            .split(' ')
            .reduce(
              (accumulator, currentValue, currentIndex) => [
                ...accumulator,
                (currentIndex < coachFieldNames.length && !!currentValue
                  ? relationship(coachFieldNames[currentIndex], 'CommCare_Ext_ID__c', currentValue)
                  : []),
              ],
              []
            );
            
            const eventtype = state.data.form.event_information.event_type; 
            
            const recordtype = eventtype==='community_health_event' || eventtype==='soccer_tournament' ? 'Testing Event' : 'Malaria Testing Event'; 
            console.log(recordtype)
            
            state.data.recordtype = recordtype; 
            
            return state; 
          }); 

          upsert(
            'Event__c',
            'CommCare_Case_ID__c',
            state=>({
            ...fields(
              field('Name', dataValue('form.event_information.Event_Name')),
              relationship('RecordType', 'Name', dataValue('recordtype')),
              field('CommCare_Ext_ID__c', state => {
                var event = dataValue('form.event_information.Event_Name')(state);
                return event ? event.replace(/\//gi, '') : event;
                }),
              field('CommCare_Case_ID__c', dataValue('form.case.@case_id')),
              field('Business_Unit__c', state => {
                const bu = dataValue('form.event_information.business_unit')(state); 
                return bu==='65680f0c4c144b03ad0f86bdc46c1ebc' ? 'GRS Zambia' : 
                bu==='04d98397e28046118fade28ced6b65cb' ? 'GRS Zimbabwe' : 
                bu==='ed125ab19ec34aacab79585e59eb76f4' ? 'GRS Partnerships': undefined ; 
              }),
              relationship('Site__r','CommCare_Ext_ID__c', dataValue('form.event_information.site')),
              relationship('Venue__r', 'CommCare_Ext_ID__c',dataValue('form.event_information.Venue')),
              field('Date__c', dataValue('form.event_information.event_date')),
              field('Event_Type__c', dataValue('recordtype')),
              field('Testing_Event_Type__c', state => {
                const type = dataValue('form.event_information.event_type')(state); 
                return type.includes('malaria') ? 'Malaria Testing Event (General Event)' : 'Other';
              }),
              field('Coordinator__c', dataValue('form.event_information.event_coordinator')),
            ),
            ...fields(...state.data.destinationCoachFields)
            })
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Register-Event:
        source_trigger: webhook
        target_job: Upsert-Register-Event
        condition_type: js_expression
        condition_label: Register Event
        condition_expression: |
          state.data.form["@name"] == "Register Event" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Register-Participant:
    name: Upsert Register Participant
    jobs:
      Upsert-Register-Participant:
        name: Upsert Register Participant
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          
          function genderMap(gender) {
            switch (gender) {
              case 'female':
                return 'Female'
              case 'male':
                return 'Male'
              case 'other':
                return 'Other'
            }
          }

          fn(state => {
            state.form = state.data.form
            return state
          })
          query(
            "SELECT Id FROM Account WHERE Name = 'Test Account'"
          );

          fn(state => {

            state.data.eventName = state.data[0].Id;
            state.data.eventCase = state.form.case['@case_id'];

            function objectToArray(object) {
              return !Array.isArray(object) ? [object] : object;
            }


            if (state.form.question1) {
              console.log('Ensuring that "question1" is an array.');
              state.form.question1 = objectToArray(state.form.question1);
            } else if (!state.form.new_participants) {
              console.log('Nothing to upsert. No participants were registered');
            } else {
              console.log('Shifting "new_participants" to "question1" array.');
              state.form.question1 = objectToArray(state.form.new_participants);
              console.log('Creating a "case" object inside each item in that array.');
              state.form.question1 = state.form.question1.map(item => ({
                ...item,
                case: item.create_skillz_plus_participant.case,
              }));
            }

            console.log('Done with initial data manipulation.');
            const persons = state.form.question1.map(person => {
              return {
                intervention_notes_to_save: state.form.intervention_notes_to_save,
                ...person
              }
            })


            const attendances = state.form.question1.map(attendee => {
              return {
                intervention_name: state.form.intervention_name,
                eventCase: state.data.eventCase,
                eventName: state.data.eventName,
                ...attendee,

              }
            });


            return { ...state, persons, attendances };
          });



          each(
            'persons[*]',
            upsert(
              'Contact',
              'CommCare_External_ID__c',
              state => (
                {
                  //Account is not being saved yet
                  Contact_Description__c: state.data.intervention_notes_to_save,
                  FirstName: state.data.participant_first_name,
                  LastName: state.data.participant_surname,
                  CommCare_External_ID__c: state.data.case['@case_id'],
                  Participant_Identification_Number_PID__c: state.data.case['@case_id'],
                  Site__r: {
                    CommCare_External_ID__c: state.data.grp_location.site_id
                  },
                  Gender__c: genderMap(state.data.gender),
                  MobilePhone: state.data.mobile_number,
                  Birthdate: state.data.date_of_birth,
                  //  MailingAddress: state.data.participants_home_address,
                  Age__c: state.data.participants_age_to_save,
                  Person_Type__c: 'Participant'
                }
              )
            )
          );



          each(
            'attendances[*]',
            upsert(
              'Event_Participation__c',
              'CommCare_External_ID__c',
              state => ({
                CommCare_External_ID__c: state.form.case['@case_id'] + '_' + state.data.case['@case_id'],
                Contact__r: 
                {
                  CommCare_External_ID__c: state.data.case['@case_id']
                },
                Event__r: {
                  CommCare_External_ID__c: state.form.case['@case_id']
                },

              })
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Register-Participant:
        source_trigger: webhook
        target_job: Upsert-Register-Participant
        condition_type: js_expression
        condition_label: Register Participant
        condition_expression: |
          state.data.form["@name"] == "Register Participant" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Risk-and-Vulnerability-Assessment---Service-Referral:
    name: Upsert Risk and Vulnerability Assessment - Service Referral
    jobs:
      Upsert-Risk-and-Vulnerability-Assessment---Service-Referral:
        name: Upsert Risk and Vulnerability Assessment - Service Referral
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          // Your job goes here.
          alterState(state => {
            function split(str, separator) {
              if (!str) {
                return [];
              } else {
                return str.toString().split(separator);
              }
            }
            function checked(key, str) {
              if (!str) return false;
              return split(str.toString(), ' ').indexOf(key) >= 0;
            }

            function capitalizeFirstLetter(str) {
              if (!str) return;
              let new_str = str.toString().toLowerCase();
              return new_str.slice(0, 1).toUpperCase() + new_str.slice(1);
            }

            function transformDont(str) {
              if (!str) return str;
              return split(str.toString(), '_')
                .map(word => word.replace(/dont/i, "don't"))
                .join('_')
                .toString()
                .trim();
            }

            function transformCant(str) {
              if (!str) return str;
              return split(str.toString(), '_')
                .map(word => word.replace(/cant/i, "can't"))
                .join('_')
                .toString()
                .trim();
            }

            function splitAndJoin(str, splitDelimiter, joinDelimiter) {
              if (!str) return;

              return split(str.toString(), splitDelimiter).join(joinDelimiter).toString().trim();
            }

            function transformHowOften(str) {
              if (!str) return;
              if (str === 'special_occasions') return 'Special Occasions';
              if (str === 'no_dont_want_to_disclose') return "Don't want to disclose";
              if (str === 'dont_want_to_disclose') return "Don't want to disclose";
              return transformGenericText(str).toString().trim();
            }

            function transformHIVStatus(status) {
              switch (status) {
                case 'yes_negative':
                  return 'Yes,Negative';
                case 'yes_positive':
                  return 'Yes,Positive';
                case 'no_i_dont':
                  return "No,I don't know";
                case 'yes_dont_want_to_disclose':
                  return "Yes, don't want to disclose";
                default:
                  return;
              }
            }

            function transformLastTested(str) {
              if (!str) return;
              switch (str.toString()) {
                case 'yes_negative':
                  return 'Yes,Negative';
                case 'yes_positive':
                  return 'Yes,Positive';
                case 'no_i_dont':
                  return "No,I don't know";
                case 'yes_dont_want_to_disclose':
                  return "Yes, don't want to disclose";
                default:
                  return;
              }
            }

            function transformMonthAgo(str) {
              if (!str) return;
              switch (str) {
                case 'month_ago':
                  return '1 month ago';
                case 'months_ago':
                  return '3 months ago';
                case 'month_ago':
                  return 'copy-1-of-months_ago ';
                case 'month_ago':
                  return '6 months ago';
                case 'a_year_or_more_ago':
                  return 'A year or more';
                default:
                  return;
              }
            }

            function transformGenericText(str) {
              if (!str) return;
              return capitalizeFirstLetter(splitAndJoin(transformDont(str), '_', ' '))
                .toString()
                .trim();
            }

            function transformRange(range) {
              if (!range) return;
              return range
                .toString()
                .replace(/\d_\d/i, match => match.replace('_', '-'))
                .toString()
                .trim();
            }

            function transformAgeRange(range) {
              if (!range) return;
              if (range === '10_years') return '< 10 years';
              if (range === 'greater_than_19') return '> 19 years';
              return capitalizeFirstLetter(transformDont(transformCant(splitAndJoin(transformRange(range), '_', ' '))))
                .toString()
                .trim();
            }

            function transformAbuseExperienced(str) {
              if (!str) return;
              return split(str, ' ')
                .map(word => capitalizeFirstLetter(word))
                .join(';')
                .toString()
                .trim();
            }

            function getAge(dateString) {
              if (!dateString) return;

              const today = new Date();
              const birthDate = new Date(dateString);
              var age = today.getFullYear() - birthDate.getFullYear();
              var m = today.getMonth() - birthDate.getMonth();
              if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                age--;
              }
              return age;
            }

            state.data.perform_a_risk_assessment = state.data.form.do_you_want_to_perform_a_risk_assessment === 'yes';

            state.data.complete_service_referrals = state.data.form.referral_services ? true : false;

            state.data.form.client_information.gender = capitalizeFirstLetter(state.data.form.client_information.gender);

            state.helperFunctions = {
              split,
              checked,
              transformAgeRange,
              transformHIVStatus,
              transformLastTested,
              transformMonthAgo,
              transformGenericText,
              transformDont,
              splitAndJoin,
              transformHowOften,
              transformAbuseExperienced,
              getAge,
            };
            return state;
          });

          upsertIf(
            dataValue('perform_a_risk_assessment'),
            'Risk_Assessment__c',
            'CommCare_Ext_ID__c',
            fields(
              field('CommCare_Ext_ID__c', dataValue('id')),
              field('Date__c', dataValue('form.risk_assessment.date')),
              field('Participant_Name__c', dataValue('form.client_information.participant_full_name')),
              field('Participant_Age__c', state => {
                const dob = dataValue('form.client_information.date_of_birth')(state);

                return state.helperFunctions.getAge(dob);
              }),
              relationship('Site2__r', 'CommCare_Ext_ID__c', dataValue('form.client_information.site')),
              relationship('EventLink__r', 'CommCare_Ext_ID__c', dataValue('form.client_information.intervention_name')),
              relationship('Venue__r', 'CommCare_Ext_ID__c', dataValue('form.client_information.venue')),

              field('Participant_Sex__c', dataValue('form.client_information.gender')),
              field('X1_0_Sexually_Active_past_12_month__c', state =>
                state.helperFunctions.transformGenericText(
                  dataValue('form.risk_assessment.sexual_risk_and_pregnancy.sexually_active_12_months')(state)
                )
              ),
              field('X1_1_Age_at_first_sex__c', state =>
                state.helperFunctions.transformAgeRange(
                  dataValue('form.risk_assessment.sexual_risk_and_pregnancy.age_at_first_sex')(state)
                )
              ),
              field('X1_2_Have_you_ever_had_unprotected_sex__c', state =>
                state.helperFunctions.transformGenericText(
                  dataValue('form.risk_assessment.sexual_risk_and_pregnancy.have_you_ever_had_unprotected_sex')(state)
                )
              ),
              field('X1_3_Sex_for_monetary_or_material_benefi__c', state =>
                state.helperFunctions.transformGenericText(
                  dataValue('form.risk_assessment.sexual_risk_and_pregnancy.sex_monetary_material')(state)
                )
              ),
              field('Do_you_know_your_HIV_status__c', state =>
                state.helperFunctions.transformHIVStatus(
                  dataValue('form.risk_assessment.hiv_status.do_you_know_your_hiv_status')(state)
                )
              ),
              field('X2_1_When_last_did_you_test_for_HIV__c', state =>
                state.helperFunctions.transformMonthAgo(
                  dataValue('form.risk_assessment.hiv_status.when_last_did_you_test_for_hiv')(state)
                )
              ),
              field('X2_2_Are_you_on_treatment_ART__c', state =>
                state.helperFunctions.transformGenericText(
                  dataValue('form.risk_assessment.hiv_status.are_you_on_treatment_art')(state)
                )
              ),
              field('X3_0_Had_an_STI_in_the_last_12months_yea__c', state =>
                state.helperFunctions.transformHowOften(dataValue('form.risk_assessment.sti_and_pep.hiv_last_12_months')(state))
              ),
              field('X3_1_Past_12_months_sex_HIV_status_part__c', state =>
                state.helperFunctions.transformGenericText(
                  dataValue('form.risk_assessment.sti_and_pep.knowing_partners_hiv_status')(state)
                )
              ),
              field('X4_0_Forms_of_abuse_experienced_before__c', state => {
                const abusesArray = state.helperFunctions.split(
                  dataValue('form.risk_assessment.gender_based_violence.abuse_experienced')(state),
                  ' '
                );
                const abuses = [];
                abusesArray.forEach(ab => {
                  abuses.push(state.helperFunctions.transformGenericText(ab));
                });
                return abuses.join(';');
              }),
              field('X4_1_Feel_unsafe_any1_interact_with_ofte__c', state =>
                state.helperFunctions.transformGenericText(
                  dataValue('form.risk_assessment.gender_based_violence.unsafe_with_others')(state)
                )
              ),
              field('X4_2_Of_what_relationship_person_to_you__c', state =>
                state.helperFunctions.transformGenericText(
                  dataValue('form.risk_assessment.gender_based_violence.relationship_of_abuser')(state)
                )
              ),
              field('X5_0_Do_you_take_alcohol_or_drugs__c', state =>
                state.helperFunctions.transformGenericText(
                  dataValue('form.risk_assessment.drugs_and_alcohol_use.do_you_take_alcohol_andor_drugs')(state)
                )
              ),
              field('X5_1_On_average_how_often_drink_alcohol__c', state =>
                state.helperFunctions.transformHowOften(
                  dataValue('form.risk_assessment.drugs_and_alcohol_use.how_often_alcohol')(state)
                )
              ),
              field('X5_2_On_average_how_often_take_drugs__c', state =>
                state.helperFunctions.transformHowOften(
                  dataValue('form.risk_assessment.drugs_and_alcohol_use.how_often_drugs')(state)
                )
              ),
              field('X5_3_Easy_for_teens_to_obtain_alcohol__c', state =>
                state.helperFunctions.transformGenericText(
                  dataValue('form.risk_assessment.drugs_and_alcohol_use.alcohol_19')(state)
                )
              ),
              field('X5_4__c', state =>
                state.helperFunctions.transformGenericText(
                  dataValue('form.risk_assessment.drugs_and_alcohol_use.illegal_drugs_19')(state)
                )
              )
            )
          );

          fn(state => {
            state.data.intervention_name = state.data.form.client_information.intervention_name
              ? [relationship('Event__r', 'CommCare_Ext_ID__c', dataValue('form.client_information.intervention_name'))]
              : [];

            return state;
          });

          upsertIf(
            state => {
              const referralServices = state.data.form.referral_services;
              return (
                referralServices &&
                (parseInt(referralServices.art_support_services.count_of_art_support_services) > 0 ||
                 parseInt(referralServices.child_protection_support_services.count_child_protection_support_services) > 0 ||
                 parseInt(referralServices.hiv_support__care.count_of_hiv_support_care) > 0 ||
                 parseInt(referralServices.legal_services.count_legal_services) > 0 ||
                 parseInt(referralServices.mental_health_services.count_mental_health_services) > 0)
              );
            }, 'NewReferral__c', 'CommCare_Ext_ID__c', state => ({
            ...fields(
              field('CommCare_Ext_ID__c', state => {
                if (state.data.form.subcase_0.case) return state.data.form.subcase_0.case['@case_id'];
                else if (state.data.form.referral_services) {
                  if (state.data.form.referral_services.art_support_services.skillz_plus_club_details)
                    return state.data.form.referral_services.art_support_services.skillz_plus_club_details
                      .create_skillz_plus_club_participant_case.case['@case_id'];
                }
                return undefined;
              }),
              field('Participants_Full_Name__c', dataValue('form.client_information.participant_full_name')),
              field('Service_Provider_Name__c', dataValue('form.client_information.coach_name')),
              field('Parent_Guardian_Full_Name__c', dataValue('form.parent__guardian_information.parent__guardian_full_name')),
              field('Relationship__c', dataValue('form.parent__guardian_information.relationship_to_client')),
              //field('', dataValue('form.parent__guardian_information.please_specify')),
              field('Parent_Guardian_Contact_Number__c', dataValue('form.parent__guardian_information.contact_number')),
              //field('', dataValue('form.parent__guardian_information.guardian_consent')),
              field('Institution_Referred_To_1__c', dataValue('form.referral_information.institution_referred_to')),
              field('Institution_Referred_To_2__c', dataValue('form.referral_information.copy-1-of-institution_referred_to')),
              field('Institution_Referred_To_3__c', dataValue('form.referral_information.copy-2-of-institution_referred_to')),
              field('HIV_Testing_Services_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'hiv_testing_services',
                  dataValue('form.referral_services.hiv_support__care.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('HIV_Other__c', dataValue('form.referral_services.hiv_support__care.please_specify')),
              field('ART_Initiation_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'art_initiationenrollment',
                  dataValue('form.referral_services.art_support_services.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('SKILLZ_Plus_Club_Support_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'grs_skillz_plus_club',
                  dataValue('form.referral_services.art_support_services.skillz_plus_club_option')(state)
                )
              ),
              field('PMTCT_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'pmtct',
                  dataValue('form.referral_services.art_support_services.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('VMMC_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'vmmc',
                  dataValue('form.referral_services.hiv_support__care.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('TB_Screening_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'tb_screening_treatment_adherence',
                  dataValue('form.referral_services.hiv_support__care.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('Legal_Other__c', dataValue('form.referral_services.legal_services.please_specify_other_legal')),
              field('Post_Exposure_Prophylaxis_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'post_exposure_prophylaxis',
                  dataValue('form.referral_services.hiv_support__care.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('PrEP_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'prep',
                  dataValue('form.referral_services.hiv_support__care.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('HIV_STI_PREVENTION_Other_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'other',
                  dataValue('form.referral_services.hiv_support__care.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('HIV_Other__c', dataValue('form.referral_services.hiv_support__care.please_specify')),
              field(
                'Victim_Friendly_Services_GRS_Staff__c',
                state =>
                  state.helperFunctions.checked(
                    'suspected_abuse_reported_police_court_other_authority',
                    dataValue(
                      'form.referral_services.child_protection_support_services.check_the_services_that_client_was_referred_to'
                    )(state)
                  ) ||
                  state.helperFunctions.checked(
                    'post_violence_care_medical_legal_counseling',
                    dataValue(
                      'form.referral_services.child_protection_support_services.check_the_services_that_client_was_referred_to'
                    )(state)
                  ) ||
                  state.helperFunctions.checked(
                    'child_support_grant_social_foster_general_support',
                    dataValue(
                      'form.referral_services.child_protection_support_services.check_the_services_that_client_was_referred_to'
                    )(state)
                  ) ||
                  state.helperFunctions.checked(
                    'other',
                    dataValue(
                      'form.referral_services.child_protection_support_services.check_the_services_that_client_was_referred_to'
                    )(state)
                  )
              ),

              field('Sexual_and_GBV_Abuse_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'sexual__gender-based_violenceabus',
                  dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                )
              ),

              // field('missing in SF', dataValue('form.referral_services.child_protection_support_services.type_of_post_violence_care')),
              // field('missing in SF', dataValue('form.referral_services.child_protection_support_services.child_support_grant_for')),
              field(
                'Legal_Services_Other_GRS_Staff__c',
                state =>
                  state.helperFunctions.checked(
                    'other',
                    dataValue('form.referral_services.legal_services.legal_services')(state)
                  ) ||
                  state.helperFunctions.checked('id', dataValue('form.referral_services.legal_services.legal_services')(state)) ||
                  state.helperFunctions.checked(
                    'birth_bertificate',
                    dataValue('form.referral_services.legal_services.legal_services')(state)
                  )
              ),
              field('Legal_Other__c', dataValue('form.referral_services.legal_services.please_specify_other_legal')),
              field('IPTG_Health_Facility__c', state =>
                state.helperFunctions.checked(
                  'iptg_to_health_facility',
                  dataValue('form.referral_services.mental_health_services.mental_health_select_services')
                )
              ),
              field('IPTG_Specialized_to_SMZ__c', state =>
                state.helperFunctions.checked(
                  'iptg_specialised_to_smz',
                  dataValue('form.referral_services.mental_health_services.mental_health_select_services')
                )
              ),
              field('STI_Screen_Testing_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'sti_screening_diagnosis_treatment',
                  dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('Contraception_Family_Plan_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'contraceptivesfamily_planning',
                  dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('Cervical_Cancer_Screening_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'cervical_cancer_screening',
                  dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('HPV_vaccine_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'hpv',
                  dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('Antenatal_Care_ANC_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'antenatal_care_anc',
                  dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                )
              ),

              field(
                'Psycho_Social_Support_GRS_Staff__c',
                state =>
                  state.helperFunctions.checked(
                    'drug_or_alcohol_abuse',
                    dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                  ) ||
                  state.helperFunctions.checked(
                    'psychiatric_careintensive_counseling',
                    dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                  ) ||
                  state.helperFunctions.checked(
                    'psychosocial_support',
                    dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                  )
              ),
              field('Psycho_Social_Services_Other_GRS_Staff__c', state =>
                state.helperFunctions.checked(
                  'other',
                  dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                )
              ),
              field('Psycho_Other__c', dataValue('form.referral_services.other_srhr_services.please_specify_srhr_referred')),

              field('Date_Referred__c', dataValue('form.follow-up.date_referred')),
              field('Expected_Visit_Date__c', dataValue('form.follow-up.expected_visit_date')),
              field('Client_Follow_up_Consent_given__c', state =>
                state.helperFunctions.checked('client_follow-up_consent_given', dataValue('form.follow-up.select')(state))
              ),
              field('Client_Linked_to_care__c', state =>
                state.helperFunctions.checked('client_linked_to_care', dataValue('form.follow-up.select')(state))
              ),

              field('Business_Unit_Site__c', state => {
                const bu = dataValue('form.client_information.business_unit')(state);
                return bu === '65680f0c4c144b03ad0f86bdc46c1ebc'
                  ? 'GRS Zambia'
                  : bu === '04d98397e28046118fade28ced6b65cb'
                  ? 'GRS Zimbabwe'
                  : bu === 'ed125ab19ec34aacab79585e59eb76f4'
                  ? 'GRS Partnerships'
                  : undefined;
              })
            ),
            ...fields(...state.data.intervention_name),
          }));

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Risk-and-Vulnerability-Assessment---Service-Referral:
        source_trigger: webhook
        target_job: Upsert-Risk-and-Vulnerability-Assessment---Service-Referral
        condition_type: js_expression
        condition_label: 'Risk & Vulnerability Assessment | Service Referral'
        condition_expression: |
          state.data.form["@name"] == "Risk & Vulnerability Assessment | Service Referral - Treatment, Care and Support" && state.data.form["client_information"]["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Service-Referral:
    name: Upsert Service Referral
    jobs:
      Upsert-Service-Referral:
        name: Upsert Service Referral
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: null
        body: |
          alterState(state => {
            function checked(key, str) {
              if (!str) return false;
              return str.split(' ').indexOf(key) >= 0;
            }

            state.helperFunctions = { checked };

            function capitalizeFirstLetter(str) {
              if (!str) return;
              let new_str = str.toString().toLowerCase();
              return new_str.slice(0, 1).toUpperCase() + new_str.slice(1);
            }

            function transform(value) {
              if (!value) return;
              switch (value.toString().trim()) {
                case 'Daughterson':
                  return 'Daughter/Son';
                case 'Other_specify':
                  return 'Other';
                case 'Single_never_married':
                  return 'Single/Never Married';
                case 'Divorced__separated':
                  return 'Divorced/separated';
                default:
                  return value;
              }
            }

            state.data.form.parent__guardian_information.relationship_to_client = transform(
              capitalizeFirstLetter(state.data.form.parent__guardian_information.relationship_to_client)
            );

            return state;
          });

          alterState(state => {
            if (!state.data.form.subcase_0) {
              console.log('No referral services to upsert');
              return state;
            }
            return upsert(
              'NewReferral__c',
              'CommCare_Ext_ID__c',
              fields(
                //  field('Enter_Partner_s_Name__c', dataValue('form.referral_information.institution_referred_to')),
                //  field('Type_of_Referral__c', dataValue('form.referral_information.type_of_referral')),
                field('Participants_Full_Name__c', dataValue('form.client_registration.participant_full_name')),
                //field('Parent_Guardian_Contact_Number__c', dataValue('form.client_registration.mobile_number')),
                relationship('Event__r', 'CommCare_Case_ID__c', dataValue('form.event_name')),
                field('CommCare_Ext_ID__c', state => {
                  var subid = state.data.form.subcase_0;
                  return subid && subid !== '' ? state.data.form.subcase_0.case['@case_id'] : dataValue('id')(state); //Set external id to 'service' subcase if available, otherwise use formid
                }),
                //field('Venue__c', dataValue('form.client_registration.school_name')),
                //field('Grade__c', dataValue('form.client_registration.grade')),
                //field('Class__c', dataValue('form.client_registration.class')),
                field('Parent_Guardian_Full_Name__c', dataValue('form.parent__guardian_information.parent__guardian_full_name')),
                field('Relationship_To_Client__c', dataValue('form.parent__guardian_information.relationship_to_client')),
                field('Parent_Guardian_Contact_Number__c', dataValue('form.parent__guardian_information.contact_number')),
                field('Institution_Referred_To_1__c', dataValue('form.referral_information.institution_referred_to')),
                field('Institution_Referred_To_2__c', dataValue('form.referral_information.copy-1-of-institution_referred_to')),
                field('Institution_Referred_To_3__c', dataValue('form.referral_information.copy-2-of-institution_referred_to')),
                field('Service_Provider_Name__c', dataValue('form.hidden_props.coach_name')),
                field('HIV_Testing_Services_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'hiv_testing_services',
                    dataValue('form.referral_services.hiv_support__care.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('VMMC_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'vmmc',
                    dataValue('form.referral_services.hiv_support__care.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('TB_Screening_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'tb_screening_treatment_adherence',
                    dataValue('form.referral_services.hiv_support__care.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('Post_Exposure_Prophylaxis_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'post_exposure_prophylaxis',
                    dataValue('form.referral_services.hiv_support__care.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('PrEP_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'prep',
                    dataValue('form.referral_services.hiv_support__care.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('HIV_STI_PREVENTION_Other_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'other',
                    dataValue('form.referral_services.hiv_support__care.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('HIV_Other__c', dataValue('form.referral_services.hiv_support__care.please_specify')),
                field('ART_Initiation_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'art_initiationenrollment',
                    dataValue('form.referral_services.art_support_services.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('PMTCT_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'pmtct',
                    dataValue('form.referral_services.art_support_services.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('SKILLZ_Plus_Club_Support_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'grs_skillz_plus_club',
                    dataValue('form.referral_services.art_support_services.skillz_plus_club_option')(state)
                  )
                ),
                field(
                  'Victim_Friendly_Services_GRS_Staff__c',
                  state =>
                    state.helperFunctions.checked(
                      'suspected_abuse_reported_police_court_other_authority',
                      dataValue(
                        'form.referral_services.child_protection_support_services.check_the_services_that_client_was_referred_to'
                      )(state)
                    ) ||
                    state.helperFunctions.checked(
                      'post_violence_care_medical_legal_counseling',
                      dataValue(
                        'form.referral_services.child_protection_support_services.check_the_services_that_client_was_referred_to'
                      )(state)
                    ) ||
                    state.helperFunctions.checked(
                      'child_support_grant_social_foster_general_support',
                      dataValue(
                        'form.referral_services.child_protection_support_services.check_the_services_that_client_was_referred_to'
                      )(state)
                    ) ||
                    state.helperFunctions.checked(
                      'other',
                      dataValue(
                        'form.referral_services.child_protection_support_services.check_the_services_that_client_was_referred_to'
                      )(state)
                    )
                ),
                field('Business_Unit_Site__c', state => {
                  const bu = dataValue('form.business_unit')(state);
                  return bu === '65680f0c4c144b03ad0f86bdc46c1ebc'
                    ? 'GRS Zambia'
                    : bu === '04d98397e28046118fade28ced6b65cb'
                    ? 'GRS Zimbabwe'
                    : bu === 'ed125ab19ec34aacab79585e59eb76f4'
                    ? 'GRS Partnerships'
                    : undefined;
                }),
                field(
                  'Sexual_and_GBV_Abuse_GRS_Staff__c',
                  dataValue('form.referral_services.child_protection_support_services.abuse_reported_to')
                ),

                field('Legal_Other__c', dataValue('form.referral_services.legal_services.please_specify_other_legal')),
                field(
                  'Legal_Services_Other_GRS_Staff__c',
                  state =>
                    state.helperFunctions.checked(
                      'other',
                      dataValue('form.referral_services.legal_services.legal_services')(state)
                    ) ||
                    state.helperFunctions.checked(
                      'id',
                      dataValue('form.referral_services.legal_services.legal_services')(state)
                    ) ||
                    state.helperFunctions.checked(
                      'birth_bertificate',
                      dataValue('form.referral_services.legal_services.legal_services')(state)
                    )
                ),
                field('STI_Screen_Testing_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'sti_screening_diagnosis_treatment',
                    dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('Contraception_Family_Plan_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'contraceptivesfamily_planning',
                    dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('Cervical_Cancer_Screening_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'cervical_cancer_screening',
                    dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('HPV_vaccine_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'hpv',
                    dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('Antenatal_Care_ANC_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'antenatal_care_anc',
                    dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('Sexual_and_GBV_Abuse_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'based_violenceabus',
                    dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field(
                  'Psycho_Social_Support_GRS_Staff__c',
                  state =>
                    state.helperFunctions.checked(
                      'drug_or_alcohol_abuse',
                      dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(
                        state
                      )
                    ) ||
                    state.helperFunctions.checked(
                      'psychiatric_careintensive_counseling',
                      dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(
                        state
                      )
                    ) ||
                    state.helperFunctions.checked(
                      'psychosocial_support',
                      dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(
                        state
                      )
                    )
                ),
                field('Psycho_Social_Services_Other_GRS_Staff__c', state =>
                  state.helperFunctions.checked(
                    'other',
                    dataValue('form.referral_services.other_srhr_services.check_the_services_that_client_was_referred_to')(state)
                  )
                ),
                field('Psycho_Other__c', dataValue('form.referral_services.other_srhr_services.please_specify_srhr_referred')),
                field('Date_Referred__c', dataValue('form.follow-up.date_referred')),
                field('Expected_Visit_Date__c', dataValue('form.follow-up.expected_visit_date')),
                field('Client_Follow_up_Consent_given__c', state =>
                  state.helperFunctions.checked('client_follow-up_consent_given', dataValue('form.follow-up.select')(state))
                ),
                field('Client_Linked_to_care__c', state =>
                  state.helperFunctions.checked('client_linked_to_care', dataValue('form.follow-up.select')(state))
                )
              )
            )(state);
          });

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Service-Referral:
        source_trigger: webhook
        target_job: Upsert-Service-Referral
        condition_type: js_expression
        condition_label: Service Referral
        condition_expression: |
          state.data.form["@name"] == "Service Referral" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Team-or-Group-Name:
    name: Upsert Team or Group Name
    jobs:
      Upsert-Team-or-Group-Name:
        name: Upsert Team or Group Name
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: null
        body: |
          // Upsert event by unique 'CommCare_External__ID__c'
          upsert(
            'ampi__Project__c',
            'CommCare_External_ID__c', 
            state => ({
              Class_Group_Team__c: state.data.form.question_group.group__team_name,
              CommCare_External_ID__c: state.data.form.case['@case_id']
            })
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Team-or-Group-Name:
        source_trigger: webhook
        target_job: Upsert-Team-or-Group-Name
        condition_type: js_expression
        condition_label: 'My Team/Group Name'
        condition_expression: |
          state.data.form["@name"] == "My Team/Group Name" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
