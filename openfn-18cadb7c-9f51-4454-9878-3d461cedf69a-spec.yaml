name: grs-staging
description: null
collections: null
credentials:
  aleksa@openfn.org-grs-commcare:
    name: grs-commcare
    owner: aleksa@openfn.org
  "hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-":
    name: 'SalesForce Sandbox Integration Oauth '
    owner: hunter@openfn.org
workflows:
  Attendance-Non-Skillz:
    name: Attendance Non Skillz
    jobs:
      Attendance-Non-Skillz:
        name: Attendance Non Skillz
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          
          fn(state => {
            if (!state.data.form.attendance_list.update_participant_cases.item) {
              console.log('No participant attendance data was provided, not upserting to Salesforce.');
              return state;
            } else {

              return execute(
                fn(state => {

                  function objectToArray(object) {
                    if (!object) return [];
                    return !Array.isArray(object) ? [object] : object;
                  }

                  state.data.form.attendance_list.update_participant_cases.item = objectToArray(
                    state.data.form.attendance_list.update_participant_cases.item  
                    // [state.data.form.attendance_list.update_participant_cases.item[0]] //TODO: Remove this line and uncomment the line above for full list of items

                  );

                  return state;
                }),

                each(
                  merge(
                    dataPath('form.attendance_list.update_participant_cases.item[*]'),
                    fields(
                      field('intervention_name', dataValue('form.intervention_name')),
                      field('caseid', dataValue('form.case.@case_id')), //this is event id
                      field('event_session_id', state => {
                        return state.data.form.case['@case_id'] + "_" + state.data.form.attendance_list.session.replace(/\/\/\s*/g, '');
                      })
                    )
                  ),
                  upsert('Attendance__c', 'CommCare_External_ID__c', state => ({
                    'CommCare_External_ID__c': `${state.data.event_session_id}_${state.data['@id']}`,
                    'Event_Session__r': {
                      'CommCare_External_ID__c': state.data.event_session_id
                    },
                    'Attendee__r': {
                      'CommCare_External_ID__c': `${state.data.caseid}_${state.data['@id']}`
                    }, //@id is the PID of participant
                    'Attended__c': state.data.attendance_session.toString().toLowerCase() === 'yes' ? "Attended" : "Not Attended"

                  }))
                )
              )(state);
            }
          });

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Attendance-Non-Skillz:
        source_trigger: webhook
        target_job: Attendance-Non-Skillz
        condition_type: js_expression
        condition_label: Attendance Generic
        condition_expression: |
          state.data.form["@name"] == "Attendance" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Coach-Session-Register:
    name: Coach Session Register
    jobs:
      Coach-Session-Register:
        name: Coach Session Register
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          // push to production

          fn(state => {
            const { form } = state.data;
              state.form = form;
            const present = form.present.toLowerCase();

            function getSessionValue() {
              let value;
              switch (present) {
                case 'yes':
                  value = 'X';
                  break;
                case 'no':
                  value = 'A';
                  break;
                case '':
                  value = 'N';
                  break;
                default:
                  value = 'U';
                  break;
              }
              return value;
            }

            const session_text = form.session;

            const session_id = session_text.trim().slice(0, session_text.indexOf(' ')).slice(1);
            console.log("session_id: ", session_id);

            const coachname = form.coach_name;
            // ? form.coach_name
            // : state.references[0].records[0].Coach_A__r.Name;

            let external_id = `${form.case['@case_id']}
              ${coachname}`; //case_id + coach_name for external Id

            state.data.commcare_external_id = external_id.toLowerCase().replace(/\s/g, '').trim();

            state.data.dynamicFields = [
              {
                [`Session_${session_id}__c`]: getSessionValue(),
                [`Session_${session_id}_Date__c`]: form.date
              }
            ];

            state.data.durationFields = { [`Session_${session_id}_Duration__c`]: form.duration };
            console.log(state.data.durationFields);

            state.coachIds = form.coach_name.split(' ');


            return state;
          });



          upsert('Event_Session__c',
            'CommCare_External_ID__c',
            state => ({
              CommCare_External_ID__c: `${state.data.form.case['@case_id']}_${state.data.form.session.replace('//', '')}`,
              Session_Date__c: state.data.form.date,
              Duration_of_Session__c: state.data.form.duration,
              Event__r: {
                CommCare_External_ID__c: state.data.form.case['@case_id']
              }
            }));

          function presentMapping(value){
            switch (value){
              case 'yes':
                return 'Attended'
              case 'no':
                return 'Not Attended'
              default:
                return null
            }

          }

          each('$.coachIds[*]', upsert('Attendance__c',
            'CommCare_External_ID__c',
            state => ({
              Event_Session__r: {
                CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.form.session.replace('//', '')}`
              },
              Attendee__r: {
                CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.data}`
              },
              Attended__c: presentMapping(state.form.present),
              CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.form.session.replace('//', '')}_${state.form.case['@case_id']}_${state.data}`
            })
          ))

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Coach-Session-Register:
        source_trigger: webhook
        target_job: Coach-Session-Register
        condition_type: js_expression
        condition_label: Coach Session Register
        condition_expression: |
          state.data.form["@name"] == "Coach Session Register" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Create-Intervention:
    name: Create Intervention
    jobs:
      Create-Intervention:
        name: Create Intervention
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          

          fn((state) => {
            function clean(str) {
              if (str == "before_after_school") {
                return "Before/After School"
              }
              if (!!str)
                return str
                  .split("_")
                  .map((word) => {
                    let new_word = word.toString().toLowerCase();
                    return new_word.slice(0, 1).toUpperCase() + new_word.slice(1);
                  })
                  .join(" ");
            }

            state.data.form.delivery_method = clean(state.data.form.delivery_method);
            state.coachesIds = state.data.form.coaches.split(" ")

            state.data.destinationCoachFields = state.data.form.coaches
              .split(" ")
              .reduce((accumulator, currentValue, currentIndex) => {
                if (!!currentValue) {
                  return {
                    ...accumulator,
                    [`Event_Participation__r`]: { CommCare_External_ID__c: currentValue },
                  };
                }
                return accumulator;
              }, {});
              state.form = state.data.form;

          const buMapping = {
              "65680f0c4c144b03ad0f86bdc46c1ebc": "GRS Zambia",
              "04d98397e28046118fade28ced6b65cb": "GRS Zimbabwe",
              "ed125ab19ec34aacab79585e59eb76f4": "GRS Partnerships",
            };

              state.businessUnit = buMapping[state.data.form.business_unit];
            return state;
          });
          query(state => `SELECT Id, Name
            FROM Account 
            WHERE Name = '${state.businessUnit}' `)

          fn((state) => {
            const accountId = state.data[0].Id;
          console.log("accountid", accountId);
            state.data.form = state.form;
            state.mapping = {
              Name: state.data.form.name_of_intervention,
              CommCare_External_ID__c: state.data.form.case["@case_id"],
              'RecordType': {
                "Name": 'Intervention Event'
              },

              ampi__Account__c: accountId,
              Venue__r:  {
                CommCare_External_ID__c: state.data.form.Venue
              }, 
              Curriculum__r: {
                CommCare_External_ID__c: state.data.form.curriculum_selection.curriculum,
              },
              Delivery_method__c: state.data.form.delivery_method,
              Class_Group_Team__c: state.data.form.class_grade,
              ampi__Project_Status__c: "Ongoing",
              // Pre_Post_Administered__c: state.data.form.prepost_administered,
              ampi__Start_Date__c: state.data.form.intervention_dates.start_date,
              ampi__End_Date__c: state.data.form.intervention_dates.end_date,
              Number_of_Coaches__c: state.data.form.num_coaches
              // ...state.data.destinationCoachFields,
            };

            console.log(state.mapping);
            state.coachContactIds = [];
           // state.form = state.data.form
            return state;
          });

          upsert("ampi__Project__c", "CommCare_External_ID__c", $.mapping)


          each('$.coachesIds.[*]', query(state => `SELECT Id, CommCare_External_ID__c from Contact where CommCare_External_ID__c = '${state.data}'`).then(state => {
            if (state.data[0]?.CommCare_External_ID__c) {
              state.coachContactIds.push(state.data[0]?.CommCare_External_ID__c)
            } else {
              console.log(`WARNING: Coach with ID '${state.data}' not found in Amp Impact`);
            }
            return state
          }))

          each('$.coachContactIds.[*]', upsert("Event_Participation__c", "CommCare_External_ID__c", state => ({
            Contact__r: {
              CommCare_External_ID__c: state.data
            },
            Event__r: {
              CommCare_External_ID__c: state.form.case["@case_id"]
            },
            CommCare_External_ID__c: `${state.form.case["@case_id"]}_${state.data}`,
          })))

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Create-Intervention:
        source_trigger: webhook
        target_job: Create-Intervention
        condition_type: js_expression
        condition_label: Create Intervention
        condition_expression: |
          state.data.form["@name"] == "Create Intervention" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Load-Commcare-Data:
    name: Load Commcare Data
    jobs:
      Get-data:
        name: Get data
        adaptor: '@openfn/language-commcare@3.2.13'
        credential: aleksa@openfn.org-grs-commcare
        body: |
          // Check out the Job Writing Guide for help getting started:
          // https://docs.openfn.org/documentation/jobs/job-writing-guide
          //get('https://docs.openfn.org/documentation');

          get("/form/b5f58b44-d135-4c83-9287-cd3c47bae075")

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Get-data:
        source_trigger: webhook
        target_job: Get-data
        condition_type: always
        enabled: true
  Upsert-Attendance-Skillz-Plus-Club:
    name: Upsert Attendance Skillz Plus Club
    jobs:
      Upsert-Attendance-Skillz-Plus-Club:
        name: Upsert Attendance Skillz Plus Club
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          fn(state => {
            state.form = state.data.form;
            return state;
          });


          query(
            `SELECT CommCare_External_ID__c FROM Event_Session__c
               WHERE Event__r.CommCare_External_ID__c = '${state.data.form.case['@case_id']}' AND Session_Date__c = NULL ORDER BY CreatedDate ASC Limit 1`);

          fnIf(!$.data[0]?.CommCare_External_ID__c, query(
            `SELECT CommCare_External_ID__c FROM Event_Session__c
               WHERE Event__r.CommCare_External_ID__c = '${state.data.form.case['@case_id']}' AND Session_Date__c = ${state.data.form.attendance_list.update_participant_cases.item[0].date} ORDER BY CreatedDate ASC Limit 1`));


          fn(state => {
            state.sessionId = state.data[0]?.CommCare_External_ID__c
            return state;
          })

          upsert('Event_Session__c', 'CommCare_External_ID__c', state => (
            {
              Session_Date__c: state.form.attendance_list.update_participant_cases.item[0].date,
              Event__r: {
                CommCare_External_ID__c: state.form.case['@case_id']
              },
              CommCare_External_ID__c: state.sessionId
            }
          ))

          each('$.form.attendance_list.update_participant_cases.item[*]',
            upsert('Event_Participation__c', 'CommCare_External_ID__c', state => ({
              Contact__r: {
                CommCare_External_ID__c: state.data['@id']
              },
              Event__r: {
                CommCare_External_ID__c: state.form.case['@case_id']
              },
              CommCare_External_ID__c: state.form.case['@case_id'] + '_' + state.data['@id']

            }))
          );

          each('$.form.attendance_list.update_participant_cases.item[*]',
            upsert('Attendance__c', 'CommCare_External_ID__c', state => ({
              Attended__c: state.data.attendance_session,
              Event_Session__r: {
                CommCare_External_ID__c: `${state.sessionId}`
              },
              Attendee__r: {
                CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.data['@id']}`
              },
              CommCare_External_ID__c: state.sessionId + '_' + `${state.form.case['@case_id']}_${state.data['@id']}`

            }))
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Attendance-Skillz-Plus-Club:
        source_trigger: webhook
        target_job: Upsert-Attendance-Skillz-Plus-Club
        condition_type: js_expression
        condition_label: Attendance Skillz Plus Club
        condition_expression: |
          state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816" && state.data.form["skillz_attendance"] == "1"

        enabled: true
  Upsert-Coach-Support-Visit-CSV:
    name: Upsert Coach Support Visit CSV
    jobs:
      Upsert-Coach-Support-Visit-CSV:
        name: Upsert Coach Support Visit CSV
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          //openfn.org source
          function transform(value) {
            if (!value) return;
            switch (value.toString().trim()) {
              case 'copy-1-of-excellent':
                return 'Excellent';
              case 'needs_improvement':
                return 'Needs Improvement';
              case 'meets_expectations':
                return 'Meets Expectations';
              case 'excellent':
                return 'Excellent';
              case 'unsatisfactory':
                return 'Unsatisfactory';
              case 'exceeds_expectations':
                return 'Exceeds Expectations';
              default:
                return value;
            }
          };

          function clean(str) {
            if (!str) return '';

            return str
              .split('_')
              .map(word => {
                let new_word = word.toString().toLowerCase();
                return new_word.slice(0, 1).toUpperCase() + new_word.slice(1);
              })
              .join(' ');
          };

          fn(state => {


            if (state.data.form['step_3_-_the_big_5'] !== undefined) {
              state.data.form['step_3_-_the_big_5'].faciliation = clean(state.data.form['step_3_-_the_big_5'].faciliation);
            }
            else {
              state.data.form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.faciliation =
                clean(state.data.form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.faciliation);
            }



            state.data.form['step_3_-_the_big_5'].builds_personal_connections =
              transform(state.data.form['step_3_-_the_big_5'].builds_personal_connections)

            state.data.form['step_3_-_the_big_5'].cool_down =
              transform(state.data.form['step_3_-_the_big_5'].cool_down)

            state.data.form['step_3_-_the_big_5'].creates_safe_space =
              transform(state.data.form['step_3_-_the_big_5'].creates_safe_space)

            state.data.form['step_3_-_the_big_5'].faciliation =
              transform(state.data.form['step_3_-_the_big_5'].faciliation)

            state.data.form['step_3_-_the_big_5'].gives_praise =
              transform(state.data.form['step_3_-_the_big_5'].gives_praise)

            state.data.form['step_3_-_the_big_5'].praise =
              transform(state.data.form['step_3_-_the_big_5'].praise)

            state.data.form['step_3_-_the_big_5'].preparation =
              transform(state.data.form['step_3_-_the_big_5'].preparation)

            state.data.form['step_3_-_the_big_5'].shares_accurate_information_about_hivaids_sexual_reproductive_health_and_ri =
              transform(state.data.form['step_3_-_the_big_5'].shares_accurate_information_about_hivaids_sexual_reproductive_health_and_ri)

            state.data.form['step_3_-_the_big_5'].sparks_vital_conversations =
              transform(state.data.form['step_3_-_the_big_5'].sparks_vital_conversations)

            state.data.form['step_3_-_the_big_5'].time_management =
              transform(state.data.form['step_3_-_the_big_5'].time_management)

            state.data.form['step_3_-_the_big_5'].warm_up =
              transform(state.data.form['step_3_-_the_big_5'].warm_up)
            state.form = state.data.form;
            state.commcareId = state.data.id
            return state;
          });

          query(
            state => `SELECT Commcare_External_ID__c FROM ampi__Project__c WHERE Name = '${state.form.hidden_properties.intervention || state.form.step_1_csv_information.intervention}'`
          )

          upsert('Visit__c', 'Commcare_External_ID__c',
            state => ({
              Coach__r: {
                Commcare_External_ID__c: state.data[0]['CommCare_External_ID__c'] +'_'+state.form.step_1_basic_information?.select_coach || state.form.step_1_csv_information.select_coach
              },
              Intervention__r: {
                Commcare_External_ID__c: state.data[0]['CommCare_External_ID__c']
              },
              CSV_Date__c: state.form.step_2_practice_information.date_of_csv,

              RecordType: {
                Name:'Coach Support Visit'
              },
              Commcare_External_ID__c: state.commcareId,
            })
          )

          // upsert(
          //   'Coach_Support_Visit__c',
          //   'CommCare_Ext_ID__c',
          //   fields(
          //     field('CommCare_Ext_ID__c', dataValue('id')),
          //     relationship('Coach_Person__r', 'CommCare_Ext_ID__c', state => {
          //       return dataValue('form.step_1_basic_information.select_coach')(state) ||
          //         dataValue('form.step_1_csv_information.select_coach')(state);
          //     }),
          //     relationship('Venue__r', 'CommCare_Ext_ID__c', state => {
          //       return dataValue('form.hidden_properties.venue')(state) ||
          //         dataValue('form.step_1_csv_information.venue')(state);
          //     }),
          //     relationship('Event__r', 'CommCare_Ext_ID__c', state => {
          //       return dataValue('form.hidden_properties.intervention')(state) ||
          //         dataValue('form.step_1_csv_information.intervention')(state);
          //     }),
          //     relationship('Curriculum_Aggregate__r', 'CommCare_Ext_ID__c', state => {
          //       return dataValue('form.hidden_properties.curriculum')(state) ||
          //         dataValue('form.step_1_csv_information.curriculum')(state);
          //     }),
          //     relationship('Site_Lookup__r', 'CommCare_Ext_ID__c', state => {
          //       return dataValue('form.hidden_properties.site')(state) ||
          //         dataValue('form.step_1_csv_information.site')(state);
          //     }),
          //     field('Date__c', dataValue('form.step_2_practice_information.date_of_csv')),
          //     //== TODO: FIx repeated mappings to only reference destination field 1 time ===//
          //     field(
          //       'Accurate_Information__c', state => {
          //         return dataValue('form.step_3_-_the_big_5.shares_accurate_information_about_hivaids_sexual_reproductive_health_and_ri')(state) ||
          //           dataValue(
          //             'form.step_3_the_big_five.question1.shares_accurate_information_about_hivaids_sexual_reproductive_health_and_ri'
          //           )(state);
          //       }),
          //     field('Creates_safe_space__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.creates_safe_space')(state) ||
          //         dataValue('form.step_3_the_big_five.question1.creates_safe_space')(state);

          //     }),
          //     field('Builds_personal_connections__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.builds_personal_connections')(state) ||
          //         dataValue('form.step_3_the_big_five.question1.builds_personal_connections')(state);
          //     }),
          //     field('Gives_praise__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.gives_praise')(state) ||
          //         dataValue('form.step_3_the_big_five.question1.gives_powerful_praise')(state);
          //     }),
          //     field('Sparks_vital_conversations__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.sparks_vital_conversations')(state) ||
          //         dataValue('form.step_3_the_big_five.question1.sparks_vital_conversations')(state);
          //     }),
          //     field('X2_Warm_Up__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.warm_up')(state) ||
          //         dataValue(
          //           'form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.warm_up'
          //         )(state);
          //     }),
          //     field('X3_Activity__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.activity')(state) || dataValue(
          //         'form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.activity'
          //       )(state);
          //     }),
          //     field('X4_Cool_Down__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.cool_down')(state) || dataValue(
          //         'form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.cool_down'
          //       )(state);
          //     }),
          //     field('X5_Facilitation__c', state => {
          //       return dataValue('form.step_3_-_the_big_5.faciliation')(state) ||
          //         dataValue(
          //           'form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.faciliation'
          //         )(state);
          //     }),
          //     field(
          //       'X6_Time_Management__c',
          //       dataValue('form.step_3_-_the_big_5.time_management')
          //     ),
          //     field(
          //       'X1_Preparation__c',
          //       dataValue('form.step_3_-_the_big_5.preparation')
          //     ),
          //     field('Introduces_micromove__c', state => {
          //       return //dataValue('form.step_3_-_the_big_5.faciliation')(state) || 
          //       dataValue(
          //         'form.step_4_comments.for_each_practice_component_describe_what_the_coach_did_well_and_how_the_co.micromove'
          //       )(state);
          //     }),
          //     field(
          //       'Notes__c',
          //       dataValue(
          //         'form.step_3_-_the_big_5.additional_notes.include_your_obsevations_related_to_preparation_punctuality_process'
          //       )
          //     )
          //   )
          // );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Coach-Support-Visit-CSV:
        source_trigger: webhook
        target_job: Upsert-Coach-Support-Visit-CSV
        condition_type: js_expression
        condition_label: Coach Support Visit Form
        condition_expression: |
          state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816" && state.data.form["hidden_properties"].csv == "1"

        enabled: true
  Upsert-Home-Visit-Log-Form:
    name: Upsert Home Visit Log Form
    jobs:
      Upsert-Home-Visit-Log-Form:
        name: Upsert Home Visit Log Form
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          // push to production

          fn(state => {
            state.form = state.data.form;
            state.id = state.data.id;
            return state;
          });

          query(state => 
                  `SELECT CommCare_External_ID__c
                  FROM ampi__Project__c
                  WHERE Name = '${state.form.basic_information.intervention_hidden}'`
                ).then(state => {
                  state.eventCommcareExternalId = state.data[0].CommCare_External_ID__c;
                  return state;
                });

          query(state => 
                  `SELECT Id, Event_Session__c, CreatedDate, Attendee__c, Attendee__r.Contact__r.Participant_Identification_Number_PID__c, Attendee__r.Event__c
                  FROM Attendance__c
                  WHERE Attendee__r.Contact__r.Participant_Identification_Number_PID__c = '${state.form.case['@case_id']}'
                  ORDER BY CreatedDate DESC limit 1`
                ).then(state => {
                  console.log(state.data)
                 // const { records } = state.data[0];
                  const eventId = state.data[0].Attendee__r.Event__c;
                  state.data.eventField = [field('Event__c', eventId)];
                  state.data.eventId = eventId
                  state.data.form = state.form;
                  return state;
                });
          fn(state => {
            // const PID = lastReferenceValue('records[1].Participant_Identification_Number_PID__c')(state);
            // if (!PID) {
            //   console.log(
            //     `Participant not found with Participant_Identification_Number_PID__c: ${state.data.form.case['@case_id']}`
            //   );
            //   return state;
            // } // @hunter this should throw an error, not just return state
             state.mapping = {
                CommCare_External_ID__c: state.id,
                Parent_mobile_number__c: state.data.form.basic_information.Mobile_number,
                Visit_Date__c: state.data.form.participant_infomation.visit_information.visit_date,
                // Pre_Post_Administered__c: state.data.form.prepost_administered,
                Description__c: state.data.form.administrative.visit_notes,
                Parent_consent__c: state.data.form.basic_information.consent_received === 'yes'?true:false,

                Reason_for_Home_Visit__c: state.data.form.participant_infomation.reason_for_home_visit,
                Event_Participation__r: { 
                  CommCare_External_ID__c: state.eventCommcareExternalId + "_" + state.data.form.case['@case_id']
                },
                Coach__r: {
                  CommCare_External_ID__c: state.eventCommcareExternalId + "_" + state.data.form.basic_information.coach_id
                },
                Intervention__c: state.eventId,
                RecordType: {
                  Name: "Home Visit"
                } 
              }

              console.log(state.mapping)

          return state

          });

          upsert('Visit__c', 'CommCare_External_ID__c', {...$.mapping}) //@hunter this will execute even if participant is not found

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Home-Visit-Log-Form:
        source_trigger: webhook
        target_job: Upsert-Home-Visit-Log-Form
        condition_type: js_expression
        condition_label: Home Visit Log Form
        condition_expression: |
          state.data.form["@name"] == "Home Visit Log Form" && state.data.form["basic_information"]["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Intervention-Notes:
    name: Upsert Intervention Notes
    jobs:
      Upsert-Intervention-Notes:
        name: Upsert Intervention Notes
        adaptor: '@openfn/language-salesforce@2.7.4'
        credential: null
        body: |
          //openfn.org source 
          upsert(
            'ampi__Project__c',
            'CommCare_External_ID__c',
            fields(
              field('CommCare_External_ID__c', dataValue('form.case.@case_id')),
              field('Notes__c', dataValue('form.intervention_notes_to_save')),
              relationship('RecordType', 'Name', 'Intervention Event')
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Intervention-Notes:
        source_trigger: webhook
        target_job: Upsert-Intervention-Notes
        condition_type: js_expression
        condition_label: Intervention Notes
        condition_expression: |
          state.data.form["@name"] == "Intervention Notes" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Post-Challenges:
    name: Upsert Post Challenges
    jobs:
      Upsert-Post-Challenges:
        name: Upsert Post Challenges
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          fn(state => {
            state.form = state.data.form;
            const formVersion = Object.keys(state.form).find(key => key.includes('challenge'));

            state.skippingUpsert = formVersion === 'post_challenge_ecap_-_post_-_season_survey_for_athletes'


            if (formVersion === 'post_challenge_ecap_-_post_-_season_survey_for_athletes') {
              console.log('Skipping upsert for ECAP data');
            }

            return state;
          })
          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            return query(`
            SELECT Id, Name, CommCare_External_ID__c
            FROM ampi__Project__c 
            WHERE Name = '${state.form.hidden_properties.intervention_name}'`)(state);
          })

          fn(state => {
            state.eventId = state.data[0]?.CommCare_External_ID__c;
            if (!state.eventId) {
              console.log(
                `Event not found for Intervention Name: 
                ${state.form.hidden_properties.intervention_name}`
              );
            }
            state.skippingUpsert = state.skippingUpsert || !state.eventId;
            if (state.skippingUpsert) {
              return state;
            }
            return query(
              `SELECT CommCare_External_ID__c from Contact 
              where Participant_Identification_Number_PID__c  = '${state.form.case['@case_id']}'`
            )(state);
          })

          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            const PID = state.data[0] && state.data[0].CommCare_External_ID__c;
            state.skippingUpsert = state.skippingUpsert || !Boolean(PID)

            if (!PID) {
              console.log(
                `Participant not found with Participant_Identification_Number_PID__c: 
                ${state.form.case['@case_id']}`
              );
              return state;
            }

            return query(`
            SELECT Id, Name, RecordTypeId, ampi__Description__c, Type__c, Active__c, Curriculum__r.Name
            FROM ampi__Submission__c 
            WHERE Active__c = true 
            AND Type__c = 'Pre/Post Template' 
            AND Curriculum__r.Commcare_External_ID__c = '${state.form.hidden_properties.Curriculum}'
          `)(state);
          })
          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            const submissionTemplate = state.data? state.data[0] : undefined
            state.skippingUpsert = state.skippingUpsert || !Boolean(submissionTemplate)

            if (!submissionTemplate){
              console.log(
                `Submission Template not found for Pre/Post template with Curriculum Id: 
                ${state.form.hidden_properties.Curriculum}`
              );
              return state;
            }
            return upsert(
              'ampi__Submission__c', 
              'CommCare_External_ID__c', state => 
              ({
              Type__c: state.form ? state.form['@name'].split(" ")[0] : null,
              ampi__Parent_Submission__c: state.data[0]?.Id,
              Curriculum__r: { CommCare_External_ID__c: state.form.hidden_properties.Curriculum },
              Event_Participation__r: {
                CommCare_External_ID__c: `${state.eventId}_${state.form.case['@case_id']}`
              },
              GRS_Event__r: { CommCare_External_ID__c: state.eventId },
              RecordType: { Name: "Submission" },
              CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.eventId}_post_submission`
            })
           )(state)});
          fnIf((state) => !state.skippingUpsert, query(state => `
            SELECT Id, Name, Record_Type_Name__c, ampi__Description__c, ampi__Response_Type__c, CommCare_Property_Name__c
            FROM ampi__Question__c 
            WHERE ampi__Submission__c = '${state.data.id}'
          `))

          // the query returns a list of questions for the specific parent submission
          // Currently hardcoding the parent submission id i created in previous runs
          // next we will look for form keys that start with form.pre_challenge_[*]
          // under form.pre_challenge_[*] we will find a list of commcare questions with their CommCare_External_ID__c
          // which we will match with ampi__Question__c CommCareExternal_ID__c and update the ampi__Picklist_Response__c field 

          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            // First, find the form element that starts with pre_challenge pattern
            const formKeys = Object.keys(state.form).filter(key =>
              key.startsWith('post_challenge_')
            );

            if (formKeys.length === 0) {
              console.log('No post_challenge keys found in form data');
              return state;
            }

            // Extract the question-answer pairs from the first matching key
            const questionAnswers = state.form[formKeys[0]];

            // Function to transform CommCare responses to Salesforce format
            function transformResponse(response) {
              if (!response) return null;
              const normalizedResponse = response.toString().trim().toLowerCase();

              if (['true', 'yes', 'agree', 'verdade', 'concorda', 'concordo', 'choice1'].includes(normalizedResponse)) {
                return "Yes";
              } else if (['false', 'no', 'disagree', 'discorda', 'discordo', 'falso', 'choice6', 'choice3'].includes(normalizedResponse)) {
                return "No";
              } else if (['i_dont_know', 'na'].includes(normalizedResponse)) {
                return "I don't know";
                // } else if (normalizedResponse === 'unanswered') {
                //   return "Unanswered";
                // } else if (normalizedResponse === 'not_applicable') {
                //   return "Not Applicable";
              } else {
                return "I don't know";
              }
            }

            // For each question in our data array, find matching answer and update
            const updates = state.data.map(question => {
              // Extract the question ID part to match with CommCare keys
              const questionName = question.CommCare_Property_Name__c


              // Look for matching keys in questionAnswers
              // Try direct match or substring match
              let matchingKey = null;
              let answer = null;

              // Try direct match
              if (questionName && questionAnswers[questionName]) {
                matchingKey = questionName;
                answer = questionAnswers[questionName];
              }

              if (matchingKey) {
                return {
                  Id: question.Id,
                  ampi__Picklist_Response__c: transformResponse(answer),
                  ampi__Date_Response__c: state.form.hidden_properties.date
                };
              }

              // No match found
              console.log(`No match found for question: ${question.ampi__Description__c}`);
              return null;
            }).filter(update => update !== null);

            console.log(`Found ${updates.length} questions to update`);

            // If we have updates, perform them
            if (updates.length > 0) {
              return update(
                'ampi__Question__c',
                updates
              )(state);
            }

            return state;
          });


          //Removing mapping... need case_id to upsert Events. Date_of_Post__c update should be handled on the SF side.
          /*upsert(
              'Event__c',
              'CommCare_Ext_ID__c',
              fields(
                field('CommCare_Ext_ID__c', dataValue('form.hidden_properties.intervention_name')),
                field('Date_of_Post__c', dataValue('form.date')),
              )
            );*/

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Post-Challenges:
        source_trigger: webhook
        target_job: Upsert-Post-Challenges
        condition_type: js_expression
        condition_label: Post Challenges
        condition_expression: |
          state.data.form["@name"] == "Post Challenges" && state.data.form["hidden_properties"]["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Pre-Challenges:
    name: Upsert Pre Challenges
    jobs:
      Upsert-Pre-Challenges:
        name: Upsert Pre Challenges
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          fn(state => {
            state.form = state.data.form;
            return state;
          })
          query(state => `
            SELECT Id, Name, CommCare_External_ID__c
            FROM ampi__Project__c 
            WHERE Name = '${state.form.hidden_properties.intervention_name}'`);

          fn(state => {
            state.eventId = state.data[0]?.CommCare_External_ID__c;
            if (!state.eventId) {
              console.log(
                `Event not found for Intervention Name: 
                ${state.form.hidden_properties.intervention_name}`
              );
            }
            state.skippingUpsert = !state.eventId;
            if (state.skippingUpsert) {
              return state;
            }
             return query(
              `SELECT CommCare_External_ID__c from Contact 
              where Participant_Identification_Number_PID__c  = '${state.form.case['@case_id']}'`
            )(state);
          })

          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            const PID = state.data[0] && state.data[0].CommCare_External_ID__c;

            if (!PID) {
              console.log(
                `Participant not found with Participant_Identification_Number_PID__c: 
                ${state.form.case['@case_id']}`
              );
              return state;
            }

            state.skippingUpsert = state.skippingUpsert || !Boolean(PID)
            return query(`
            SELECT Id, Name, RecordTypeId, ampi__Description__c, Type__c, Active__c, Curriculum__r.Name
            FROM ampi__Submission__c 
            WHERE Active__c = true 
            AND Type__c = 'Pre/Post Template' 
            AND Curriculum__r.Commcare_External_ID__c = '${state.form.hidden_properties.Curriculum}'
          `)(state);
          })
          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            const submissionTemplate = state.data? state.data[0] : undefined
            state.skippingUpsert = state.skippingUpsert || !Boolean(submissionTemplate)

            if (!submissionTemplate){
              console.log(
                `Submission Template not found for Pre/Post template with Curriculum Id: 
                ${state.form.hidden_properties.Curriculum}`
              );
              return state;
            }


            return upsert(
              'ampi__Submission__c', 
              'CommCare_External_ID__c', state => 
              ({
                Type__c: state.form ? state.form['@name'].split(" ")[0] : null,
                ampi__Parent_Submission__c: state.data[0].Id,
                Curriculum__r: { CommCare_External_ID__c: state.form.hidden_properties.Curriculum },
                Event_Participation__r: { 
                  CommCare_External_ID__c: `${state.form.hidden_properties.intervention_name}_${state.form.case['@case_id']}` 
                },
                GRS_Event__r: { Name: state.form.hidden_properties.intervention_name },
                RecordType: {Name: "Submission"},
                CommCare_External_ID__c: `${state.form.case['@case_id']}_${state.form.hidden_properties.intervention_name}_pre_submission`
              })
            )(state)});
          fnIf((state) => !state.skippingUpsert, query(state => `
            SELECT Id, Name, Record_Type_Name__c, ampi__Description__c, ampi__Response_Type__c, CommCare_Property_Name__c
            FROM ampi__Question__c 
            WHERE ampi__Submission__c = '${state.data.id}'
          `));

          // the query returns a list of questions for the specific parent submission
          // Currently hardcoding the parent submission id i created in previous runs
          // next we will look for form keys that start with form.pre_challenge_[*]
          // under form.pre_challenge_[*] we will find a list of commcare questions with their CommCare_External_ID__c
          // which we will match with ampi__Question__c CommCareExternal_ID__c and update the ampi__Picklist_Response__c field 

          fn(state => {
            if (state.skippingUpsert) {
              return state;
            }
            // First, find the form element that starts with pre_challenge pattern
            const formKeys = Object.keys(state.form).filter(key => 
              key.startsWith('pre_challenge_')
            );
            
            if (formKeys.length === 0) {
              console.log('No pre_challenge keys found in form data');
              return state;
            }
            
            // Extract the question-answer pairs from the first matching key
            const questionAnswers = state.form[formKeys[0]];
            
            // Function to transform CommCare responses to Salesforce format
            function transformResponse(response) {
              if (!response) return null;
              const normalizedResponse = response.toString().trim().toLowerCase();
              
              if (['true', 'yes', 'agree', 'verdade', 'concorda', 'concordo', 'choice1'].includes(normalizedResponse)) {
                return "Yes";
              } else if (['false', 'no', 'disagree', 'discorda', 'discordo', 'falso', 'choice6', 'choice3'].includes(normalizedResponse)) {
                return "No";
              } else if (['i_dont_know', 'na'].includes(normalizedResponse)) {
                return "I don't know";
              // } else if (normalizedResponse === 'unanswered') {
              //   return "Unanswered";
              // } else if (normalizedResponse === 'not_applicable') {
              //   return "Not Applicable";
              } else {
                return "I don't know";
              }
            }
            
            // For each question in our data array, find matching answer and update
            const updates = state.data.map(question => {
              // Extract the question ID part to match with CommCare keys
              const questionName = question.CommCare_External_ID__c
                
              
              // Look for matching keys in questionAnswers
              // Try direct match or substring match
              let matchingKey = null;
              let answer = null;
              
              // Try direct match
              if (questionName && questionAnswers[questionName]) {
                matchingKey = questionName;
                answer = questionAnswers[questionName];
              }
              
              if (matchingKey) {
                return {
                  Id: question.Id,
                  ampi__Picklist_Response__c: transformResponse(answer),
                  ampi__Date_Response__c: state.form.date
                };
              }
              
              // No match found
              console.log(`No match found for question: ${question.ampi__Description__c}`);
              return null;
            }).filter(update => update !== null);
            
            console.log(`Found ${updates.length} questions to update`);
            
            // If we have updates, perform them
            if (updates.length > 0) {
              return update(
                'ampi__Question__c',
                updates
              )(state);
            }
            
            return state;
          });

          // //Removing mapping... need case_id to upsert Events. Date_of_Pre__c update should be handled on the SF side.
          // // upsert(
          // //   'Event__c',
          // //   'CommCare_Ext_ID__c',
          // //   fields(
          // //     field('CommCare_Ext_ID__c', dataValue('form.hidden_properties.intervention_name')),
          // //     field('Date_of_Pre__c', dataValue('form.date')),

          // //   )
          // // );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Pre-Challenges:
        source_trigger: webhook
        target_job: Upsert-Pre-Challenges
        condition_type: js_expression
        condition_label: Pre Challenges
        condition_expression: |
          state.data.form["@name"] == "Pre Challenges" && state.data.form["hidden_properties"]["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Register-Participant:
    name: Upsert Register Participant
    jobs:
      Upsert-Register-Participant:
        name: Upsert Register Participant
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          
          function genderMap(gender) {
            switch (gender) {
              case 'female':
                return 'Female'
              case 'male':
                return 'Male'
              case 'other':
                return 'Other'
            }
          }

          fn(state => {
            state.form = state.data.form
            return state
          })
          query( state =>
            `SELECT Id FROM Account WHERE Name = '${state.form.question1[0].case.update.business_unit_name}'`
          );

          fn(state => {

            state.accountId = state.data[0].Id;
            state.data.eventCase = state.form.case['@case_id'];

            function objectToArray(object) {
              return !Array.isArray(object) ? [object] : object;
            }


            if (state.form.question1) {
              console.log('Ensuring that "question1" is an array.');
              state.form.question1 = objectToArray(state.form.question1);
            } else if (!state.form.new_participants) {
              console.log('Nothing to upsert. No participants were registered');
            } else {
              console.log('Shifting "new_participants" to "question1" array.');
              state.form.question1 = objectToArray(state.form.new_participants);
              console.log('Creating a "case" object inside each item in that array.');
              state.form.question1 = state.form.question1.map(item => ({
                ...item,
                case: item.create_skillz_plus_participant.case,
              }));
            }

            console.log('Done with initial data manipulation.');
            const persons = state.form.question1.map(person => {
              return {
                AccountId: state.accountId,
                intervention_notes_to_save: state.form.intervention_notes_to_save,
                ...person
              }
            })


            const attendances = state.form.question1.map(attendee => {
              return {
                intervention_name: state.form.intervention_name,
                eventCase: state.data.eventCase,
                ...attendee,

              }
            });


            return { ...state, persons, attendances };
          });



          each(
            'persons[*]',
            upsert(
              'Contact',
              'CommCare_External_ID__c',
              state => (
                {
                  AccountId: state.data.AccountId,
                  Contact_Description__c: state.data.intervention_notes_to_save,
                  FirstName: state.data.participant_first_name,
                  LastName: state.data.participant_surname,
                  CommCare_External_ID__c: state.data.case['@case_id'],
                  Participant_Identification_Number_PID__c: state.data.case['@case_id'],
                  Site__r: {
                    CommCare_External_ID__c: state.data.grp_location.site_id
                  },
                  Gender__c: genderMap(state.data.gender),
                  MobilePhone: state.data.mobile_number,
                  Birthdate: state.data.date_of_birth,
                  MailingStreet: state.data.participants_home_address,
                  Age__c: state.data.participants_age_to_save,
                  Person_Type__c: 'Participant'
                }
              )
            )
          );



          each(
            'attendances[*]',
            upsert(
              'Event_Participation__c',
              'CommCare_External_ID__c',
              state => ({
                CommCare_External_ID__c: state.form.case['@case_id'] + '_' + state.data.case['@case_id'],
                Contact__r: 
                {
                  CommCare_External_ID__c: state.data.case['@case_id']
                },
                Event__r: {
                  CommCare_External_ID__c: state.form.case['@case_id']
                },

              })
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Register-Participant:
        source_trigger: webhook
        target_job: Upsert-Register-Participant
        condition_type: js_expression
        condition_label: Register Participant
        condition_expression: |
          state.data.form["@name"] == "Register Participant" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Register-Skills-plus-Club:
    name: Upsert Register Skills plus Club
    jobs:
      Upsert-Register-Skills-plus-Club:
        name: Upsert Register Skills plus Club
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          // push to production
          function clean(str) {
            if (!!str)
              return str
                .split('_')
                .map(word => {
                  let new_word = word.toString().toLowerCase();
                  return new_word.slice(0, 1).toUpperCase() + new_word.slice(1);
                })
                .join(' ');
          }

          fn((state) => {
            state.coaches = state.data.form.coaches.split(' ');
            state.form = state.data.form;
            return state;
          });



          upsert(
            'ampi__Project__c',
            'CommCare_External_ID__c',
            state => ({
              Name: clean(state.data.form.name_of_skillz_plus_club),
              CommCare_External_ID__c: state.data.form.case['@case_id'],
              // Venue__c: {
              //   CommCare_External_ID__c:  state.data.form.case['@case_id']
              // },

            })
          );

          each('$.coaches[*]', upsert('Event_Participation__c', 'CommCare_External_ID__c', state => ({
            Contact__r: {
              CommCare_External_ID__c: state.data
            },
            Event__r: {
              CommCare_External_ID__c: state.form.case['@case_id']
            },
            CommCare_External_ID__c: state.form.case['@case_id'] + '_' + state.data
          })))

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Register-Skills-plus-Club:
        source_trigger: webhook
        target_job: Upsert-Register-Skills-plus-Club
        condition_type: js_expression
        condition_label: Register Skillz plus Club
        condition_expression: |
          state.data.form["@name"] == "Register Skillz Plus Club" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
  Upsert-Service-Referral-1:
    name: Upsert Service Referral 1
    jobs:
      Upsert-Service-Referral:
        name: Upsert Service Referral
        adaptor: '@openfn/language-salesforce@7.0.0'
        credential: 'hunter@openfn.org-SalesForce-Sandbox-Integration-Oauth-'
        body: |
          fn(state => {
            state.form = state.data.form;
            state.id = state.data.id;
            let businessUnit;
            switch (state.form.business_unit) {
              case '04d98397e28046118fade28ced6b65cb':
                businessUnit = 'GRS Zimbabwe';
                break;
              case 'ed125ab19ec34aacab79585e59eb76f4':
                businessUnit = 'GRS Partnerships';
                break;
              case '65680f0c4c144b03ad0f86bdc46c1ebc':
                businessUnit = 'GRS Zambia';
                break;
              default:
                businessUnit = undefined;
            }
            state.businessUnit = businessUnit;
            return state
          });

          // Query coach to get its external Id using coach name
          query(`SELECT Id, Name, CommCare_External_ID__c, Phone FROM Contact WHERE Person_Type__c = 'Coach'  AND Name = '${$.form.hidden_props.coach_name}'`).then(state=>{
            state.coachId = state.data[0]?.CommCare_External_ID__c;
            return state
          });

          //Query Account using business unit name to be used for creating participant
          query( state =>
            `SELECT Id FROM Account WHERE Name = '${state.businessUnit}'`
          ).then (state => {
            state.accountId = state.data[0].Id
            return state;
          });

          //Upsert Contact of type Participant
          upsert(
              'Contact',
              'CommCare_External_ID__c',
              state => (
                {
                  AccountId: state.accountId,
                  FirstName: state.form.client_registration.participant_full_name.split(" ")[0],
                  LastName: state.form.client_registration.participant_full_name.split(" ")[1],
                  CommCare_External_ID__c: state.form.subcase_0.case['@case_id'],
                  Participant_Identification_Number_PID__c: state.form.subcase_0.case['@case_id'],
                  MobilePhone: state.form.client_registration.mobile_number,
                  Person_Type__c: 'Participant'
                }
              )
            )

            // Query event using event name 
            query(state => `
            SELECT Id, Name, CommCare_External_ID__c
            FROM ampi__Project__c 
            WHERE Name = '${state.form.event_name}'`).then(state => {
              state.eventId = state.data[0]?.CommCare_External_ID__c;
            if (!state.eventId) {
              console.log(
                `Event not found for Intervention Name: 
                ${state.form.event_name}`
              );
            }
            return state;
            });

            //Upsert event participation for newly created participant
           upsert(
              'Event_Participation__c',
              'CommCare_External_ID__c',
              state => ({
                CommCare_External_ID__c: state.eventId + '_' + state.form.subcase_0.case['@case_id'],
                Contact__r: 
                {
                  CommCare_External_ID__c: state.form.subcase_0.case['@case_id']
                },
                Event__r: {
                  CommCare_External_ID__c: state.eventId
                },

              })
            )



            
          fn(state => {


              const servicesObj = state.form.referral_services;
            const servicesList = [];

            Object.keys(servicesObj).forEach(category => {
              if (servicesObj[category] && 
                  servicesObj[category].check_the_services_that_client_was_referred_to) {
                
                const services = servicesObj[category].check_the_services_that_client_was_referred_to
                  .split(' ')
                  .filter(s => s);
                
                servicesList.push(...services);
              }
            });


            // Prepare the case ID for participant lookup
              const caseId = state.form.subcase_0.case['@case_id'];

            function capitalizeFirstLetter(str) {
              if (!str) return;
              let new_str = str.toString().toLowerCase();
              return new_str.slice(0, 1).toUpperCase() + new_str.slice(1);
            }

            function transform(value) {
              if (!value) return;
              switch (value.toString().trim()) {
                case 'Daughterson':
                  return 'Daughter/Son';
                case 'Other_specify':
                  return 'Other';
                case 'Single_never_married':
                  return 'Single/Never Married';
                case 'Divorced__separated':
                  return 'Divorced/separated';
                default:
                  return value;
              }
            };
            function checked(key, str) {
              if (!str) return false;
              return str.split(' ').indexOf(key) >= 0;
            }

              state.helperFunctions = { checked };
              let subid = state.form.subcase_0;
              state.externalId = subid && subid !== '' ? state.form.subcase_0.case['@case_id'] : state.id; 

            // Create mapping object
            const mapping = {
              GRS_Event__r: {
                CommCare_External_ID__c: state.eventId
              },
              Participant__r: {
                CommCare_External_ID__c: `${state.eventId}_${caseId}`
              },
              Event_Participation__r: {
                CommCare_External_ID__c: `${state.eventId}_${state.coachId}`
              },
              // Participant_Name__c: state.form.client_registration.participant_full_name,
              Type__c: "Individual",
              Date_of_Referral__c: state.form['follow-up'] ? state.form['follow-up'].date_referred : null,
              Referred_By__r: { 
                  CommCare_External_ID__c: `${state.eventId}_${state.coachId}`
                  },
              Parent_s_Full_Name__c: state.form.parent__guardian_information ? 
                state.form.parent__guardian_information.parent__guardian_full_name : null,
              Relationship_To_Participant__c: transform(capitalizeFirstLetter(state.form.parent__guardian_information.relationship_to_client)),
              Participant_Linked_to_Care__c: state.helperFunctions.checked(
                'client_linked_to_care', 
                state.form['follow-up'] ? state.form['follow-up'].select : ''
              ),
              Expected_Visit_Date__c: state.form['follow-up'] ? state.form['follow-up'].expected_visit_date : null,
              Business_Unit__r: {
                CommCare_External_ID__c: state.form.business_unit
              }
            };

            return { ...state, referralServiceMapping: mapping, servicesList };
          });

          each('$.servicesList[*]', 
          upsert('Referral_Service__c','CommCare_External_ID__c', state =>({
            GRS_Referral__r: {CommCare_External_ID__c: state.data},
            CommCare_External_ID__c: `${state.externalId}_${state.data}`,
            ...state.referralServiceMapping
          }))
          )

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Upsert-Service-Referral:
        source_trigger: webhook
        target_job: Upsert-Service-Referral
        condition_type: js_expression
        condition_label: Service Referral
        condition_expression: |
          state.data.form["@name"] == "Service Referral" && state.data.form["business_unit"] != "57ac433fe0cb4319a701cc9e7c721816"

        enabled: true
